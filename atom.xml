<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>某科学のBLOG</title>
  
  <subtitle>与其感慨路难行，不如马上出发</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://a-kali.github.io/"/>
  <updated>2019-11-05T12:15:40.259Z</updated>
  <id>http://a-kali.github.io/</id>
  
  <author>
    <name>Hsaki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>递归神经网络与注意力机制</title>
    <link href="http://a-kali.github.io/2019/11/05/%E9%80%92%E5%BD%92%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
    <id>http://a-kali.github.io/2019/11/05/递归神经网络与注意力机制/</id>
    <published>2019-11-05T10:46:32.000Z</published>
    <updated>2019-11-05T12:15:40.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="递归神经网络介绍"><a href="#递归神经网络介绍" class="headerlink" title="递归神经网络介绍"></a>递归神经网络介绍</h1><h2 id="为什么需要递归神经网络？"><a href="#为什么需要递归神经网络？" class="headerlink" title="为什么需要递归神经网络？"></a>为什么需要递归神经网络？</h2><p>因为现实生活中有很多数据是随着时间的变化而变化的（如股票行情、天气、语音、文本）这些数据统称为时序数据(Time Series Data)。这些数据随着时间变化而变化，前一时刻的数据会对后一时刻的数据产生影响；同时这些数据的长度不固定。此时就需要一个能处理该类数据的模型，RNN便应运而生。</p><h2 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h2><p>RNN大家都懂的，这里就不多bb了</p><p><img src="https://s2.ax1x.com/2019/08/10/eO1htI.png" alt="eO1htI.png"></p><h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;递归神经网络介绍&quot;&gt;&lt;a href=&quot;#递归神经网络介绍&quot; class=&quot;headerlink&quot; title=&quot;递归神经网络介绍&quot;&gt;&lt;/a&gt;递归神经网络介绍&lt;/h1&gt;&lt;h2 id=&quot;为什么需要递归神经网络？&quot;&gt;&lt;a href=&quot;#为什么需要递归神经网络？&quot; cla
      
    
    </summary>
    
    
      <category term="RNN" scheme="http://a-kali.github.io/tags/RNN/"/>
    
      <category term="递归神经网络" scheme="http://a-kali.github.io/tags/%E9%80%92%E5%BD%92%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="注意力机制" scheme="http://a-kali.github.io/tags/%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/"/>
    
      <category term="LSTM" scheme="http://a-kali.github.io/tags/LSTM/"/>
    
  </entry>
  
  <entry>
    <title>深度学习自动驾驶概述</title>
    <link href="http://a-kali.github.io/2019/11/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E6%A6%82%E8%BF%B0/"/>
    <id>http://a-kali.github.io/2019/11/05/深度学习自动驾驶概述/</id>
    <published>2019-11-05T09:45:08.000Z</published>
    <updated>2019-11-05T09:46:18.720Z</updated>
    
    <content type="html"><![CDATA[<p><strong>目标：</strong>使用端到端的深度学习方法，根据车载摄像头的画面来判断如何<strong>打方向盘和踩油门</strong>。</p><p><img src="https://s2.ax1x.com/2019/11/05/MprAb9.png" alt="MprAb9.png"></p><p>参考论文：End to End Learning for Self-Driving Cars</p><p><strong>收集数据：</strong></p><p><img src="https://s2.ax1x.com/2019/11/05/MpBqT1.png" alt="MpBqT1.png"></p><p>汽车人为行驶时，其左中右三个摄像头、方向盘转向、油门、转向灯等数据都会通过其 CAN bus 传入处理器。而如今的汽车中基本都带有上述传感器帮忙训练神经网络；当汽车自动驾驶时，汽车根据中间摄像头传入的数据来操控方向盘等设备。</p><p><img src="https://s2.ax1x.com/2019/11/05/Mpye1K.png" alt="Mpye1K.png"></p><p><strong>自动驾驶模拟器：</strong></p><p><a href="https://imgchr.com/i/Mp6LR0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/11/05/Mp6LR0.md.png" alt="Mp6LR0.md.png"></a></p><p>看起来很好玩的样子，有空看看源码了解下神经网络输出如何操控这些游戏。</p><p><strong>图像处理：</strong></p><ul><li>亮度调整（适应白天、晚上、阴天、晴天等情景）</li><li>归一化</li><li>图像切割（去除地平线以上和车头部分的无关紧要的数据）</li><li>水平翻转（左转右转）</li><li>数据平衡（欠采样、过采样、给样本少的数据更大权重、合成新数据）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;目标：&lt;/strong&gt;使用端到端的深度学习方法，根据车载摄像头的画面来判断如何&lt;strong&gt;打方向盘和踩油门&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/11/05/MprAb9.png&quot; al
      
    
    </summary>
    
    
      <category term="深度学习" scheme="http://a-kali.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="自动驾驶" scheme="http://a-kali.github.io/tags/%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
    
      <category term="概述" scheme="http://a-kali.github.io/tags/%E6%A6%82%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Kaggle days China, Oct 2019</title>
    <link href="http://a-kali.github.io/2019/10/30/Kaggle-days-China-Oct-2019/"/>
    <id>http://a-kali.github.io/2019/10/30/Kaggle-days-China-Oct-2019/</id>
    <published>2019-10-30T12:17:30.000Z</published>
    <updated>2019-10-30T12:36:08.535Z</updated>
    
    <content type="html"><![CDATA[<p>最重要：高质量的baseline top15 pipeline 重复利用</p><p>batchnorm问题，基线很难高分的一个原因，关注神经网络细节</p><p>融合技巧很重要，stacking</p><p>伪标签：测试集、外部数据。注意不要overfit伪标签</p><p>数据技巧可能比任务技巧更重要</p><p>实验效率，总结每一次实验经验，不管是成功还是失败。2块gpu</p><p>kernel only：模型蒸馏、加速</p><p>找到任务实质相关的论文</p><p>计算机视觉各个分支的论文，read everyday。很可能会在之前相关的论文上找到thick</p><p>高质量的local validation可以用来验证所有thick</p><p>多类别分类（一个样本属于一个类别） vs 多标签分类（一个样本属于多个类别）</p><p>找到之前相似的比赛，观察高分solution</p><p>将数据增强后的图片可视化查看效果，根据任务选择增强方法</p><p>医疗影像预训练数据：MedicalNet。目前没开源2d数据</p><p>cycle learning rate：减少调参，更快收敛</p><p>多类别：交叉熵损失；多标签：二值交叉熵损失</p><p>mixup：一种数据增强的方法。将两张图片及其标签按一定比例进行融合</p><p>apex：基于pytorch的低精度运算（32位或16位）。减少显存占用，增加训练速度。pure float可能会导致精度损失和溢出。解决方案：混合精度训练。（设成O1就行了）</p><p>梯度累加（batch accumulation）：增大batch的方法，（多累积几步再更新梯度？）</p><p>伪标签：数据少或有大量额外数据且没有标签的情况下</p><ol><li>训练集训练模型</li><li>测试数据</li><li>将置信度较高的数据放入训练集（0.95、0，98）</li><li>再训练</li></ol><p>数据蒸馏（knowledge distillation）：使用小模型（student）来获取大模型（teacher）中的核心知识</p><ol><li>将数据集分为k折</li><li>k折交叉验证训练teacher model</li><li>预测out-of-fold的标签</li><li>在out-of-fold训练student model</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最重要：高质量的baseline top15 pipeline 重复利用&lt;/p&gt;
&lt;p&gt;batchnorm问题，基线很难高分的一个原因，关注神经网络细节&lt;/p&gt;
&lt;p&gt;融合技巧很重要，stacking&lt;/p&gt;
&lt;p&gt;伪标签：测试集、外部数据。注意不要overfit伪标签&lt;/
      
    
    </summary>
    
    
      <category term="kaggle days" scheme="http://a-kali.github.io/tags/kaggle-days/"/>
    
      <category term="kaggle" scheme="http://a-kali.github.io/tags/kaggle/"/>
    
      <category term="深度学习" scheme="http://a-kali.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>FCN论文解读</title>
    <link href="http://a-kali.github.io/2019/10/26/FCN%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    <id>http://a-kali.github.io/2019/10/26/FCN论文解读/</id>
    <published>2019-10-26T02:06:38.000Z</published>
    <updated>2019-10-26T02:06:38.439Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RSNA Intracranial Hemorrhage Detection 比赛记录</title>
    <link href="http://a-kali.github.io/2019/10/16/RSNA-Intracranial-Hemorrhage-Detection-%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
    <id>http://a-kali.github.io/2019/10/16/RSNA-Intracranial-Hemorrhage-Detection-比赛记录/</id>
    <published>2019-10-16T07:24:54.000Z</published>
    <updated>2019-10-30T12:13:00.459Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="深度学习" scheme="http://a-kali.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="Kaggle" scheme="http://a-kali.github.io/tags/Kaggle/"/>
    
      <category term="图片分类" scheme="http://a-kali.github.io/tags/%E5%9B%BE%E7%89%87%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>R-CNN, Fast R-CNN, Faster R-CNN, Mask R-CNN 系列论文解读</title>
    <link href="http://a-kali.github.io/2019/10/10/R-CNN-Fast-R-CNN-Faster-R-CNN-Mask-R-CNN-%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    <id>http://a-kali.github.io/2019/10/10/R-CNN-Fast-R-CNN-Faster-R-CNN-Mask-R-CNN-论文解读/</id>
    <published>2019-10-10T09:21:36.000Z</published>
    <updated>2019-11-05T09:43:19.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h1><p>论文地址：<a href="https://arxiv.org/pdf/1311.2524.pdf" target="_blank" rel="noopener">Rich feature hierarchies for accurate object detection and semantic segmentation</a></p><p>发布时间：2014.10.22</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>伴随着AlexNet的横空出世，卷积神经网络开始进入人们的视线，R-CNN便是将卷积神经网络运用于目标检测和语义分割的一个成功典范，其在 VOC 2012 将最佳mAP提高了30%。其成绩对卷积神经网络在目标检测的运用产生了深远的影响。</p><p>但在这之前，需要解决两个主要的问题：</p><ol><li>与图片分类不同，目标检测需要在图片上定位目标的位置。那么如何利用深度的神经网络去做目标的定位？</li><li>如何在一个小规模的数据集上训练能力强劲的网络模型？</li></ol><p>R-CNN全称为Regions with CNN features，其名字来源于其主要使用的两项技术：卷积神经网络（CNN）和<strong>区域推荐</strong>（Region Proposals），而区域推荐正是第一个问题的解决方法。当时已有许多现成的区域推荐算法，本文作者使用的是<strong>选择性搜索(selective search)算法</strong>。</p><h2 id="选择性搜索"><a href="#选择性搜索" class="headerlink" title="选择性搜索"></a>选择性搜索</h2><p><img src="https://s2.ax1x.com/2019/10/25/KwZVHS.png" alt="KwZVHS.png"></p><p>大概就是根据临近颜色的相似度将左边的原图变成像右边由色块组成的图片，然后根据色块选出候选框。这样可以减少对一些不必要的区域进行卷积运算，比如左图左上角那个框。该算法被后续几代网络沿用，直到 Faster R-CNN 使用神经网络进行区域推荐。</p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p>R-CNN整体过程如下：</p><ol><li>给定一张输入图片，使用selective search从图片中提取 2000 个类别独立的候选区域。</li><li>将每个候选区域缩放到227×227，输入到 CNN中抽取一个固定长度的特征向量。</li><li>使用<strong>各个类别对应的SVM对特征向量进行二分类</strong>，判断该候选区域是否包含该类别，之后对每个类别的窗口进行极大值抑制。</li></ol><p><img src="https://img-blog.csdnimg.cn/20181210155342586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JyaWJsdWU=,size_16,color_FFFFFF,t_70" alt></p><p>对于第二个问题，作者给出的解决方法是：在大型图片分类数据集ILSVRC上预训练卷积神经网络，并微调（fine-tuning）到小型目标检测数据集PASCAL上，这使得mAP上升了8个百分点。</p><p>R-CNN高效的原因：</p><ol><li>所有类别共享CNN参数</li><li>特征维度相对较小</li></ol><h1 id="SPP-Net"><a href="#SPP-Net" class="headerlink" title="SPP-Net"></a>SPP-Net</h1><p>论文地址：<a href="https://arxiv.org/abs/1406.4729" target="_blank" rel="noopener">Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition</a></p><p>发布时间：2015.4.23</p><h2 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h2><p>由于 CNN 需要固定大小的输入，在将图片输入到神经网络之前需要对图片进行缩放(warp)或裁剪(crop)。缩放会造成图片几何失真，而裁剪则可能损失部分目标物像素，这将会对图片识别精确度有所影响。</p><p><img src="https://s2.ax1x.com/2019/10/22/K8nKrd.png" alt="K8nKrd.png"></p><p>CNN 只能接收固定尺寸图片的原因是其全连接层节点数目固定，而其卷积层是可以接收不同尺寸的图片的。于是作者设计了用于神经网络中的 <strong>SPP</strong> (spatial pytamid pooling, 空间金字塔池化) 模块，位于卷积层和全连接层之间，用于<strong>接收任意尺寸的图片、提取其特征并产生固定大小的输出</strong>。而且实验表明，训练时使用不同尺寸的输入，可以提高测试精度。</p><h2 id="空间金字塔池化层"><a href="#空间金字塔池化层" class="headerlink" title="空间金字塔池化层"></a>空间金字塔池化层</h2><p><img src="https://s2.ax1x.com/2019/10/22/KGQ98P.png" alt="KGQ98P.png"></p><p>作者将 CNN 中的最后一个池化层用 SPP 替代。如图所示，<strong>SPP 将最后一层卷积层输出的特征图分割成不同尺寸的网格，分别为4×4、2×2、1×1，然后对每个小格进行max pooling，再将池化后的结果连接起来，就能得到（16+4+1）× 256 的固定长度的输出</strong>（这里的256为256个channel）。</p><h2 id="SPP-在目标检测中的应用"><a href="#SPP-在目标检测中的应用" class="headerlink" title="SPP 在目标检测中的应用"></a>SPP 在目标检测中的应用</h2><p>前面提到，R-CNN 在图像中选出2000个候选窗口，并将每个窗口缩放后输入到神经网络中，这样对一张图片反复使用深度卷积网络十分耗时。测试时，特征提取是其主要的时间瓶颈。</p><p>论文中提到，特征图的ROI与原图中的目标物的位置存在一定的映射关系，如下图：</p><p><img src="https://s2.ax1x.com/2019/10/22/KG6IIA.png" alt="KG6IIA.png"></p><p>于是<strong>对于一张图片，只需要提取一次特征，然后将特征图的2000个候选区域输入 SPP 模块就能得到固定长度的表示。由于只需要进行一次卷积操作，节省了大量候选区域通过神经网络的时间。</strong></p><h1 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h1><p>论文地址：<a href="https://arxiv.org/abs/1504.08083" target="_blank" rel="noopener">Fast R-CNN</a></p><p>发布时间：2015.9.27</p><h2 id="背景-2"><a href="#背景-2" class="headerlink" title="背景"></a>背景</h2><p>SPPnet 虽然对R-CNN进行了一些改进，但仍然存在许多问题：</p><ul><li>需要大量产生候选框</li><li>对目标的定位只能靠候选框来粗略定位</li><li>多阶段pipeline，特征提取、模型训练、SVM分类器训练、边框回归要分别进行</li><li>特征图要存在本地磁盘，影响速度</li></ul><p>于是 Fast R-CNN 改进了在目标检测任务中的性能，其优势如下：</p><ul><li>相比 R-CNN、SPPnet 有着更高的 mAP</li><li>单阶段(single-stage)训练，使用多任务损失(multi-task loss)</li><li>训练可以更新网络每一层的参数</li><li>无需使用磁盘缓存特征</li></ul><h2 id="架构细节和模型训练"><a href="#架构细节和模型训练" class="headerlink" title="架构细节和模型训练"></a>架构细节和模型训练</h2><p><img src="https://s2.ax1x.com/2019/10/23/KtoCi6.png" alt="KtoCi6.png"></p><p>从上图直观上来看，Fast R-CNN 与 SPPnet 的结构有两个区别：</p><ol><li>SPP模块被换成了RoI池化层</li><li>网络末端有两个输出，分别用于图像分类和边框回归。分类器被换成了softmax。使用softmax的好处在于不用单独训练一个SVM分类器；缺点在于对于一个候选框最多只能分出一类物体，即使一个候选框包含了多个类别的目标（大概）。</li></ol><p>另外值得一提的是，Fast R-CNN 采用的是固定大小的输入，而不像SPPnet使用任意大小的输入。</p><h3 id="RoI-池化层"><a href="#RoI-池化层" class="headerlink" title="RoI 池化层"></a>RoI 池化层</h3><p>RoI 池化层实质上就是单层的 SPP 模块。其将一个候选窗口划分为 H×W 的网格，对每个网格内进行最大池化，最后输出一个长度为 H×W 的特征。超参数 H 和 W 视具体网络结构而定。</p><h3 id="多任务损失"><a href="#多任务损失" class="headerlink" title="多任务损失"></a>多任务损失</h3><p>多任务损失由分类任务损失和边框回归任务损失线性组合而成：<br>$$<br>L=L_{cls}(p,u)+\lambda [u\geq 1]L_{loc}(t^u,v)\<br>$$<br>其中：<br>$$<br>L_{cls}(p,u)=-\log p_u\<br>L_{loc}(t^u,v)=\sum smooth_{L_1}(t^u_i-v_i)<br>$$</p><h3 id="Mini-batch-sampling"><a href="#Mini-batch-sampling" class="headerlink" title="Mini-batch sampling"></a>Mini-batch sampling</h3><p>（其实这一段我没看太懂，以下仅作参考）</p><p>在调优(fine tuning)训练时，每个mini-batch中首先加入 N 张完整图片，从 N 张图片中选出一共 R 个 IoU&gt;0.5 的候选区域，然后将这 R 个候选区域作为训练样本放入网络训练。</p><h1 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h1><p>论文地址：<a href="https://arxiv.org/abs/1506.01497" target="_blank" rel="noopener">Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks</a></p><p>发布时间：2016.1.6</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>性能优越的目标检测网络都依赖区域推荐(region proposal)算法来假定目标位置，比如R-CNN中的选择搜索(search selective)算法，而这些区域推荐的计算消耗正是整个网络性能的瓶颈。本文作者引入了<strong>区域推荐网络(Region Proposal Network, RPN)</strong>，尝试使用神经网络来进行区域提取。并将 RPN 和 Fast R-CNN 融合在一起，共享卷积特征，成为一个端到端的神经网络。</p><h2 id="架构概览"><a href="#架构概览" class="headerlink" title="架构概览"></a>架构概览</h2><p><img src="https://s2.ax1x.com/2019/10/25/KdqldS.png" alt="KdqldS.png"></p><p>Fast R-CNN 大致结构如图。可以看出，网络由四步组成：</p><ol><li>输入的图片经过卷积层输出一张特征图</li><li>将特征图输入 RPN，得到候选区域</li><li>将特征图上候选区域的对应位置输入到 RoI 池化层</li><li>输入到分类器得出分类结果</li></ol><p>那么 RPN 具体是怎样的呢？</p><h2 id="RPN"><a href="#RPN" class="headerlink" title="RPN"></a>RPN</h2><p><img src="https://s2.ax1x.com/2019/10/25/KdIwZQ.png" alt="KdIwZQ.png"></p><p>从上图中Faster R-CNN更具体的结构，包括左下方的RPN模块。RPN具体流程如下：</p><ol><li><p>使用<strong>滑动窗口(slide window)</strong>遍历整个特征图(feature map)，遍历过程中以每个window中心产生9个预设<strong>锚框(anchor)</strong>，9个锚框分别对应3种尺寸和3种长宽比。</p><p><img src="https://s2.ax1x.com/2019/10/25/KwJZQS.png" alt="KwJZQS.png"></p></li><li><p>将锚框分别输入到<strong>线性分类层(cls layer)</strong>和<strong>边框回归层(reg layer)</strong>中。分类层通过softmax对锚框进行二分类，初步判断该锚框是前景还是背景（锚框里是否包含目标物）；回归层通过边框回归进一步修正锚框，使锚框定位更精确。</p><p><img src="https://s2.ax1x.com/2019/10/26/K0RaZ9.png" alt="K0RaZ9.png"></p></li><li><p>将筛选、修正后的锚框映射到特征图上，输入到ROI池化层。后续操作和Fast R-CNN一样。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;R-CNN&quot;&gt;&lt;a href=&quot;#R-CNN&quot; class=&quot;headerlink&quot; title=&quot;R-CNN&quot;&gt;&lt;/a&gt;R-CNN&lt;/h1&gt;&lt;p&gt;论文地址：&lt;a href=&quot;https://arxiv.org/pdf/1311.2524.pdf&quot; target=
      
    
    </summary>
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="深度学习" scheme="http://a-kali.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="论文解读" scheme="http://a-kali.github.io/tags/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="语义分割" scheme="http://a-kali.github.io/tags/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"/>
    
      <category term="R-CNN" scheme="http://a-kali.github.io/tags/R-CNN/"/>
    
      <category term="目标检测" scheme="http://a-kali.github.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>计算机视觉算法岗面试归纳</title>
    <link href="http://a-kali.github.io/2019/10/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E7%AE%97%E6%B3%95%E5%B2%97%E9%9D%A2%E8%AF%95%E5%BD%92%E7%BA%B3/"/>
    <id>http://a-kali.github.io/2019/10/05/计算机视觉算法岗面试归纳/</id>
    <published>2019-10-05T01:32:59.000Z</published>
    <updated>2019-10-28T14:12:55.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ML"><a href="#ML" class="headerlink" title="ML"></a>ML</h1><ul><li>介绍一下调参的经验</li><li>Softmax的公式和伪代码</li><li>分类常见的指标有什么，如何理解AUC？</li><li>介绍决策树、RF、XGBoost、GBDT和 LightGBM</li><li>XGboost的loss函数的推导（mse以及非mse形式），以及求解推导。</li><li>使用O(N)复杂度完成GBDT分裂</li><li>介绍 F1-score，AUC，交叉熵，ROC</li><li>介绍 Adboost，GBDT，XGBoost</li><li>介绍不同的聚类算法：K-Means、GMM、DBSCAN等</li><li>CCA和PCA的区别</li><li>牛顿法能用于非凸函数吗？</li><li>XGBoost里处理缺失值的方法</li><li>样本不平衡对 SVM 的影响</li><li>KNN和Kmeans的算法中K的含义，K对算法的影响，怎么选择K</li><li>LR的全过程，从train到inference，损失函数</li><li>介绍常见的集成方法</li><li>LR + softmax做多分类和LR + multiLoss 做多分类区别在哪里</li><li>LR为什么用交叉熵作为loss函数</li><li>Kmeans的缺点？如何改善？</li><li>讲一下K-means算法的过程以及原理</li><li>为什么Bagging降方差，Boosting降偏差？</li><li>介绍XGBoost对GBDT的提升，LightGBM对XGBoost的提升</li><li>为什么要对连续型数值进行离散化，这样做有什么优势</li><li>LR 为什么用sigmoid函数？</li><li>怎么解决样本不均衡（重点考核损失函数优化）</li><li>HMM 和 CRF的区别</li><li>XGBoost 如何处理缺失数据？</li><li>写一下 LR 和 SVM 的损失函数</li><li>正负样本不均衡时的解决方案</li><li>知道哪些降维的方法，具体讲讲</li><li>线性模型和非线性模型都有哪些？</li><li>手写AUC的计算（小矩形积分得到总面积即可）</li><li>决策树分支的原理</li><li>offerpolicy 和 onpolicy 的区别</li><li>为什么随机森林的树比 GBDT 的深一点？</li><li>逻辑回归的目标函数(损失函数)是凸函数吗？</li><li>完全二叉树的概念</li><li>朴素贝叶斯与贝叶斯有什么区别？</li><li>SVM 为什么变成对偶问题来求解？</li><li>缺失值如何处理，什么情况下均值、众数，什么情况下丢弃特征。</li><li>诸如ID类的特征如何处理，编码方式one-hot还是其他的，高维时？什么样才算高维，有没有界定？</li><li>聚类的算法有哪些？评价方法？优化算法？</li><li>解释几何间隔和函数间隔</li><li>描述决策树，如何选特征，怎么划分，怎么剪枝，介绍信息增益</li><li>K-Means 聚类这种方法一定会收敛嘛？如果不收敛，怎么办？</li><li>SVM 的目标函数，为什么能用拉格朗日乘子法讲原始最优化问题转化为极大极小问题，数学原理是什么</li><li>介绍SVM，其中的软间隔是什么意思？</li><li>使用线性回归的时候什么时候会需要用L2？</li><li>如果F1已经趋于平稳，如何在保持F1稳定的前提下提高precision，降低recall；</li><li>LR 为什么不用 MSE，SVM 为什么用hinge不用logloss</li><li>XGBoost 怎么解决过拟合？怎么剪枝？怎么选择特征？怎么处理缺失值？</li><li>XGBoost 的默认深度</li><li>各种决策树模型的优劣（从最简单的ID3到最后的LGB）</li><li>SVM 核函数哪些是高维空间维度已知，哪些是未知的？</li><li>LR介绍、LR对特征需要做什么特殊处理吗？类别特征、连续特征</li><li>损失函数正则项的本质是什么? </li><li>SVM 有哪些核函数？</li><li>L1 正则化为什么能使特征稀疏？</li><li>Stacking原理，还有怎么调优？</li><li>XGBoost怎么调参？用了多少棵树？</li><li>各种决策树模型的优劣（从最简单的ID3到最后的LGB）</li><li>ID3 C4.5 CART的区别</li><li>手推 SVM, GBDT, XGBoost</li><li>CRF 怎么训练的（传统+深度学习）</li><li>得到AUC的两种计算方法</li><li>树的分裂方式（id3,gini,gdbt,xgboost）</li><li>监督学习的概念？什么是随机森林，随机森林的优点？</li><li>LR和SVM区别（计算复杂度）</li><li>Adam优化器的迭代公式</li><li>SGD每步做什么，为什么能online learning</li><li>L1 L2正则化区别</li><li>PCA原理和执行步骤</li><li>特征工程知道吗？举几个特征归一化的例子</li><li>SVM为什么可以处理非线性问题</li><li>L1正则化的先验分布？</li><li>L1的不知道，L2的先验分布知道吧？</li><li>多标签分类问题怎么解决，从损失函数角度考虑</li></ul><h1 id="NN"><a href="#NN" class="headerlink" title="NN"></a>NN</h1><ul><li>激活函数 除了 Sigmoid tanh ReLU 还有什么介绍一下？</li><li>BFE 和 Dropout的关系</li><li>Dropout是失活神经元还是失活连接</li><li>手推梯度反向传播</li><li>介绍 Leaky Relu 并写公式</li><li>分类网络样本不均衡怎么办？</li><li>dropout层作用，如何实现有什么作用？</li><li>Dropout 前向和反向的处理</li><li>神经网络如果没有激活函数还能解决线性不可分问题吗？</li><li>Tensorflow的动态图和静态图有什么区别</li><li>GN，BN，LN，IN 它们的共性和特性</li><li>为什么BN有泛化能力的改善. 什么场景用什么normalization方法，效果如何.</li><li>Dropout为什么能防止过拟合？具体实现</li><li>dropout在训练和测试时不同，怎么保证测试结果稳定</li><li>如何计算神经网络的 FLOPS？</li><li>梯度下降陷入局部最优有什么解决办法</li></ul><h1 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h1><ul><li>手写灰度直方图代码</li><li>介绍一下开运算和闭运算</li><li>介绍双目相机识别目标深度的原理</li><li>单目视觉如何测量深度？</li><li>介绍常见的边缘检测算法</li><li>SIFT 特征是如何保持旋转不变性的？</li><li>如何快速判断图中有环？</li><li>介绍常见的边缘检测算子</li><li>Hough 变换原理（直线和圆检测）</li><li>为什么 Sobel 算子中间是2，两边是1</li><li>算法题：实现 OpenCV中的图像缩放，包括实现双线性插值</li><li>输入图像灰度值对模型的影响，为什么要把0-255转化成0-1？</li><li>介绍 RANSAC</li><li>介绍一阶二阶边缘检测算子一阶二阶边缘检测算子</li><li>OpenCV里面findcontour函数的原理是什么？</li><li>相机里面的标定参数有哪些？是怎么计算这些参数的？</li><li>如何求边缘，45°边缘，高斯滤波和双边滤波</li><li>代码题：手撕实现图像的resize和rotate90度</li><li>手写中值滤波</li><li>介绍一下高斯滤波，均值滤波，中值滤波</li><li>SIFT特征提取怎么做的，具备什么性质，为什么</li><li>讲一下CTC的原理</li><li>夜间拍照的多图对齐和融合</li></ul><h1 id="CV"><a href="#CV" class="headerlink" title="CV"></a>CV</h1><ul><li>介绍你读到的19年 Anchor-free 目标检测论文</li><li>简单介绍Fast RCNN -&gt; Faster RCNN -&gt; mask RCNN (这个真的好高频)</li><li>256×256×3 -&gt; 128×128×64的卷积，stride，padding和待优化的参数有多少</li><li>手撕 SoftNMS代码</li><li>CNN反向传播公式推导；参数共享指的是？</li><li>介绍熟悉的NAS网络</li><li>介绍目标检测中的多尺度训练/测试？</li><li>为什么 DenseNet 比 ResNet 更耗显存？</li><li>为什么深度学习中的图像分割要先编码再解码？</li><li>1*1 卷积有什么作用？</li><li>如何计算语义分割的 mIoU（写伪代码）</li><li>原始图片中的 RoI 如何映射到 feature map ?</li><li>PyTorch的高效convolution实现</li><li>PyTorch 不用库函数如何实现多机多卡</li><li>哪些情况用 MaxPool比AveragePool效果好？原因</li><li>介绍Anchor based 和Anchor free目标检测网络的优缺点</li><li>YOLOv3在小缺陷检测上也很好，RPN上和two-stage的有什么区别</li><li>MobileNetV2 module的参数量和FLOPs计算</li><li>CNN 的感受野受什么影响</li><li>CNN 如何保持平移方向不变性</li><li>如果分类的数据图像每一类只有几张，你会用什么方法？</li><li>RPN怎么计算 box 的实际坐标</li><li>介绍常见的 Anchor free 目标检测算法</li><li>算法题：编程实现目标检测中的 IoU 计算</li><li>公式及讲解soft attention，hard attention，multi head attention</li><li>卷积操作是线性的吗？CNN是线性的吗？为什么？（激活函数）常用的激活函数？</li><li>3×3 卷积核 与 5×5 卷积核相比的优点</li><li>CNN Maxpooling 怎么反向传播？</li><li>Inception（V1-V4）网络结构以及优缺点</li><li>写出 YOLOv3 的损失函数</li><li>YOLOV1~V3系列介绍，以及每一版的改进，优缺点介绍</li><li>介绍金字塔池化，ASPP，深度可分，带孔卷积</li><li>VGG网络什么特点，用到了哪几种卷积核？</li><li>介绍 anchor-based和anchor-free两者的优缺点</li><li>PyTorch 多gpu训练机制的原理，优化器以及网络参数保存机制</li><li>讲下faster-rcnn？Faster-rcnn里面的NMS的算法原理是什么？</li><li>Mask R-CNN 如何提高mask的分辨率？</li><li>普通卷积、DW+PW卷积计算量推导</li><li>MobileNet V2中的Residual结构最先是哪个网络提出来的</li><li>CornerNet介绍，CornerPooling是怎么做的，怎么解决cornernet检测物体合并为一个框的问题</li><li>GoogLeNet中为什么采用小的卷积核？</li><li>说一下UNet的结构</li><li>熟悉deeplab吗，aspp是怎样的，与其他的state-of-art的模型对比，deeplab还可以做哪些改进？</li><li>retinanet的focal loss是解决的什么问题</li><li>CRF后处理的目的</li><li>介绍deeplabv3，画出backbone（串联和并联），论文中认为这两种哪种方式更好？如何避免friding efect、deeplabv3的损失函数</li></ul><h1 id="SLAM"><a href="#SLAM" class="headerlink" title="SLAM"></a>SLAM</h1><ul><li>PnP求解最少需要几个点？</li><li>ORBSLAM的哪个部分最耗时？</li><li>ORBSLAM怎么克服尺度漂移问题？</li><li>回环原理讲一下，要估计哪些量？</li><li>后端BA中，如何存在outlier一般怎么解决？</li><li>BA中，海塞矩阵的求逆有哪些可以加速的方法？</li><li>单应矩阵(homography)为什么只有8个自由度？</li><li>如何设计一个视觉+IMU+RTK+Lidar的定位系统？</li><li>对于光照明暗变化、动态场景，视觉SLAM如何去解决？</li><li>ROS中，node属于多进程，如何把两个node放在一个进程中？</li><li>ORBSLAM 后端H矩阵求解的算法复杂度是多少？如何去加速后端求解？</li><li>ORB-SLAM的初始化步骤</li><li>介绍 Bundle Adjustment</li><li>机器人学中表示旋转的方式有哪些？区别是什么？</li><li>检测圆的方法有哪些？</li><li>霍夫圆变换的原理是什么？</li><li>你知道哪些点云匹配的算法？原理是什么？</li><li>ROS里面的一些基本操作怎么实现？</li><li>怎么估计3D姿态？用什么表示姿态？</li><li>相机标定方法与流程，内外参矩阵求解</li><li>什么是闭环检测？常用的方法有哪些？你用的哪种方法？有没有创新？</li><li>解释一下Gauss-Netwon和LM算法。</li><li>熟悉Ceres优化库吗？说一下。</li><li>描述（扩展）卡尔曼滤波与粒子滤波，你自己在用卡尔曼滤波时遇到什么问题没有？</li><li>除了视觉传感，还用过其他传感吗？比如GPS，激光雷达。。。</li></ul><h1 id="反向面试"><a href="#反向面试" class="headerlink" title="反向面试"></a>反向面试</h1><p>再也不用担心面试官灵魂拷问：你有什么要问我的么？</p><p>下面列表里的问题对于参加技术面试的人来说很有用：</p><ul><li>我的日常工作是什么？</li><li>入职培训会是什么样的？</li><li>你们怎么使用源码控制系统？</li><li>团队内/团队间的交流通常是怎样的？</li><li>有标准的开发环境吗？是强制的吗？</li><li>我可以为开源项目做贡献吗？是否需要审批？</li><li>团队里面初级和高级工程师的比例是多少？</li><li>晋升流程是怎样的？要求/预期是怎样沟通的？</li><li>我入职的岗位是新增还是接替之前离职的同事？</li><li>入职之后在哪个项目组，项目是新成立还是已有的？b公司是否有技术分享交流活动？有的话，多久一次呢？</li><li>更多提问可以在 <a href="https://github.com/yifeikong/reverse-interview-zh" target="_blank" rel="noopener">https://github.com/yifeikong/reverse-interview-zh</a> 找到</li></ul><p>出了以上几种类型的题目，还常见编程算法题、C++语言细节、Python语言细节、英语题、数学题、项目、计算机网络和操作系统</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ML&quot;&gt;&lt;a href=&quot;#ML&quot; class=&quot;headerlink&quot; title=&quot;ML&quot;&gt;&lt;/a&gt;ML&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;介绍一下调参的经验&lt;/li&gt;
&lt;li&gt;Softmax的公式和伪代码&lt;/li&gt;
&lt;li&gt;分类常见的指标有什么，如何理解AUC？&lt;/
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://a-kali.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="神经网络" scheme="http://a-kali.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="语义分割" scheme="http://a-kali.github.io/tags/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"/>
    
      <category term="目标检测" scheme="http://a-kali.github.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
      <category term="面试" scheme="http://a-kali.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="SLAM" scheme="http://a-kali.github.io/tags/SLAM/"/>
    
      <category term="图像处理" scheme="http://a-kali.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>周志华《机器学习》</title>
    <link href="http://a-kali.github.io/2019/09/16/%E5%91%A8%E5%BF%97%E5%8D%8E%E3%80%8A%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%8B/"/>
    <id>http://a-kali.github.io/2019/09/16/周志华《机器学习》/</id>
    <published>2019-09-16T11:28:39.000Z</published>
    <updated>2019-09-18T12:36:28.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第-1-章-绪论"><a href="#第-1-章-绪论" class="headerlink" title="第 1 章    绪论"></a>第 1 章    绪论</h1><h2 id="1-2-基本术语"><a href="#1-2-基本术语" class="headerlink" title="1.2 基本术语"></a>1.2 基本术语</h2><p>假设（hypothesis）：根据数据的潜在规律学习而得的模型。亦称为学习器。</p><p>簇（cluster）：聚类学习中的一个组。</p><p>泛化（generalization）：学得模型适用于新样本的能力。</p><h2 id="1-3-假设空间"><a href="#1-3-假设空间" class="headerlink" title="1.3 假设空间"></a>1.3 假设空间</h2><p>假设空间：机器学习中可能的函数构成的空间。学习的过程即是在假设空间中进行搜索的过程。</p><h1 id="第-2-章-模型评估与选择"><a href="#第-2-章-模型评估与选择" class="headerlink" title="第 2 章    模型评估与选择"></a>第 2 章    模型评估与选择</h1><h2 id="2-2-评估方法"><a href="#2-2-评估方法" class="headerlink" title="2.2 评估方法"></a>2.2 评估方法</h2><h3 id="2-2-1-留出法"><a href="#2-2-1-留出法" class="headerlink" title="2.2.1 留出法"></a>2.2.1 留出法</h3><p><strong>留出法</strong>（hold-out）将数据集划分为两个互斥的集合，分别作为训练集和测试集。</p><h3 id="2-2-2-交叉验证法"><a href="#2-2-2-交叉验证法" class="headerlink" title="2.2.2 交叉验证法"></a>2.2.2 交叉验证法</h3><h3 id="2-2-3-自助法"><a href="#2-2-3-自助法" class="headerlink" title="2.2.3 自助法"></a>2.2.3 自助法</h3><p><strong>自助采样法</strong>（bootstrap sampling）对大小为 m 的数据集进行 m 次放回采样，采样得到的数据作为训练集，初始数据集中大约有 36.8% 的数据未被采样过，这部分数据作为测试集。</p><p>自助法在数据集较小、难以划分测试集和训练集时比较有用。但会改变原有数据集的分布，引入估计偏差。</p><h3 id="2-2-4-调参与最佳模型"><a href="#2-2-4-调参与最佳模型" class="headerlink" title="2.2.4 调参与最佳模型"></a>2.2.4 调参与最佳模型</h3><p>模型评估与选择中，用于评估模型的数据集常称为<strong>验证集</strong>。</p><h2 id="2-3-性能度量"><a href="#2-3-性能度量" class="headerlink" title="2.3 性能度量"></a>2.3 性能度量</h2><p>性能度量：对模型泛化能力的评价标准。</p><p>均方误差（mean squared error）：$E(f;D)=\frac{1}{m} \sum^m_{i=1}(f(x_i)-y_i)^2.$ 常用于回归任务中。</p><h3 id="2-3-1-错误率与精度"><a href="#2-3-1-错误率与精度" class="headerlink" title="2.3.1 错误率与精度"></a>2.3.1 错误率与精度</h3><ul><li><strong>错误率</strong>（error rate）：分类错误的样本数占样本总数的比例</li><li><strong>精度</strong>（accuracy）：分类正确的样本数占样本总数的比例</li></ul><p>此处的评估标准仅仅是根据样本分类的正误个数进行评估，没有表现出单个样本的错误程度。</p><h3 id="2-3-2-查准率、查全率与-F1"><a href="#2-3-2-查准率、查全率与-F1" class="headerlink" title="2.3.2 查准率、查全率与 F1"></a>2.3.2 查准率、查全率与 F1</h3><p>在信息检索等应用场景中经常出现如下的需求，比如想知道“检索出的信息中有多少比例是用户感兴趣的”“用户感兴趣的信息中有多少被检索出来了”。此时用<strong>查准率</strong>（precision）和<strong>查全率</strong>（recall，也被称为召回率）更为适合此类需求。</p><p>混淆矩阵：</p><p><a href="https://imgchr.com/i/nfoRB9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/09/16/nfoRB9.png" alt="nfoRB9.png"></a></p><p>查准率 P 和查全率 R 分别被定义为<br>$$<br>P=\frac{TP}{TP+FP}\<br>R=\frac{TP}{TP+FN}<br>$$<br>查全率和查准率是一对矛盾的度量。一般来说，查全率高时查准率低，查准率高时查全率低。</p><p>P-R曲线、ROC和AUC可参考<a href="https://a-kali.github.io/2019/09/03/机器学习中的评价指标/">机器学习中的评价指标</a>。</p><h3 id="2-3-4-代价敏感错误率与代价曲线"><a href="#2-3-4-代价敏感错误率与代价曲线" class="headerlink" title="2.3.4 代价敏感错误率与代价曲线"></a>2.3.4 代价敏感错误率与代价曲线</h3><p>不同类型的错误所造成的后果不同，为权衡不同类型错误所造成的不同损失，可以为错误赋予<strong>非均等代价</strong>。</p><p>在非均等代价下，我们所希望的不再是简单地最小化错误次数，而是希望最小化<strong>总体代价</strong>。以二分类为例，其代价敏感错误率为：<br>$$<br>E = \frac{1}{m}(\sum_{x_i\in D^+}I(f(x_i)\not=y_i)\times cost_{01}+\sum_{x_i\in D^-}I(f(x_i)\not=y_i)\times cost_{10})<br>$$<br>其中$I(·)$为指示函数，$cost$为错误的权重（即代价）。</p><p><strong>代价曲线</strong>可以直接反映非均等代价下学习器的期望总体代价。代价曲线的绘制很简单：ROC曲线上的每一点对应了代价平面上的一条线段，根据ROC曲线上的每一点的状态绘制一条从(0,FPR) 到 (1, FNR) 的线段，线段下的面积即表示了该条件下的期望总体代价。</p><p><img src="https://s2.ax1x.com/2019/09/18/n7Ri7j.png" alt="n7Ri7j.png"></p><h1 id="第-3-章-线性模型"><a href="#第-3-章-线性模型" class="headerlink" title="第 3 章    线性模型"></a>第 3 章    线性模型</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第-1-章-绪论&quot;&gt;&lt;a href=&quot;#第-1-章-绪论&quot; class=&quot;headerlink&quot; title=&quot;第 1 章    绪论&quot;&gt;&lt;/a&gt;第 1 章    绪论&lt;/h1&gt;&lt;h2 id=&quot;1-2-基本术语&quot;&gt;&lt;a href=&quot;#1-2-基本术语&quot; class
      
    
    </summary>
    
      <category term="机器学习" scheme="http://a-kali.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://a-kali.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Inception v1-v4 论文解读</title>
    <link href="http://a-kali.github.io/2019/09/04/Inception-v1-v4/"/>
    <id>http://a-kali.github.io/2019/09/04/Inception-v1-v4/</id>
    <published>2019-09-04T09:57:36.000Z</published>
    <updated>2019-10-10T13:20:51.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Inception-V1"><a href="#Inception-V1" class="headerlink" title="Inception V1"></a>Inception V1</h1><p>论文地址：<a href="https://arxiv.org/pdf/1409.4842v1.pdf" target="_blank" rel="noopener">Going deeper with convolutions</a></p><h2 id="动机与深层思考"><a href="#动机与深层思考" class="headerlink" title="动机与深层思考"></a>动机与深层思考</h2><p>直接提升神经网络性能的方法是提升网络的深度和宽度。然而，更深的网络意味着其参数的大幅增加，从而导致计算量爆炸。因此，作者希望能在计算资源消耗恒定不变的条件下，提升网络性能。</p><p>降低计算资源消耗的一个方法是使用<a href="https://baike.baidu.com/item/稀疏连接/22764619?fr=aladdin" target="_blank" rel="noopener">稀疏连接</a>结构，但不均匀的稀疏数值运算在当前适合密集运算的硬件条件下运行十分低效。作者希望将稀疏连接结构运用于卷积层，并以此解决稀疏连接在密集运算条件下效率低下的问题。于是Inception便应运而生。</p><h2 id="架构细节"><a href="#架构细节" class="headerlink" title="架构细节"></a>架构细节</h2><p> <img src="https://s2.ax1x.com/2019/10/04/uDtGDI.png" alt="uDtGDI.png"></p><p>作者希望“找到最优的局部结构，并在空间上重复它”，如上的Inception模块便是作者找到的最优局部结构。该结构有四个通道，同时使用了1×1、3×3、5×5的卷积核。作者表示“卷积核的大小并没有什么特殊含义，其便利性大于必要性”，在padding=0，1，2的时候特征图大小相同，方便对齐。</p><p>随着网路层数的加深，其特征图的抽象程度变高，空间集中程度下降。这意味着5×5卷积核占比应逐渐增加。然而在具有大量滤波器的卷积层，5×5卷积核运算量太大。这催生了对Inception的第二个改进：在计算量要求较多的地方使用1×1卷积核进行降维。于是便诞生了完整版的Inception V1模块：</p><p><img src="https://s2.ax1x.com/2019/10/04/uDB4kn.png" alt="uDB4kn.png"></p><h2 id="GoogLeNet"><a href="#GoogLeNet" class="headerlink" title="GoogLeNet"></a>GoogLeNet</h2><p>GoogLeNet是一个大量使用了Inception模块堆叠的一个神经网络，其结构如下（图太大了，这里就不放完整图片了）：</p><p><img src="https://s2.ax1x.com/2019/10/04/uDrWin.png" alt="#uDrWin.png"></p><p>值得一提的是，考虑到深层网络的梯度消失问题（当时还没出现批归一化和残差结构），GoogLeNet使用了在网络的中间隐藏层使用了<strong>辅助分类器</strong>（auxiliary classifiers），其训练时给出的分类结果的损失的以0.3的权重加到总损失上，以在一定程度上解决梯度消失问题。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li><p>很多文章中都有提到，Inception结构使用不同大小的卷积核能够适应不同尺度的特征。虽然并没有在原论文中看见相关阐述，但我觉得有点道理。论文中提到Inception在目标检测任务中有更出色的效果，这很可能与其能适应不同尺度特征有关。</p><p><img src="https://s2.ax1x.com/2019/10/04/uDo1Ds.png" alt="如图，图中三只狗狗所占图片区域大小不同"></p></li><li><p>作者并没有在原论文中提到Inception结构起作用的原因，但我认为Inception结构和ResNet的残差结构有异曲同工之妙（虽然ResNet的诞生在GoogLeNet之后）。残差结构能让神经网络自己通过调整参数来选择是否趋近于恒等映射，而Inception能让神经网络自己选择卷积核大小（3×3、5×5 convolutions），或是将这层作为全连接（1×1 convolutions，Inception结构最左边的那个1×1卷积核作用相当于全连接），抑或是池化（3×3 Max Pooling）。</p></li></ul><h1 id="Inception-V2-amp-V3"><a href="#Inception-V2-amp-V3" class="headerlink" title="Inception V2&amp;V3"></a>Inception V2&amp;V3</h1><p>论文链接：<a href="https://arxiv.org/abs/1512.00567" target="_blank" rel="noopener">Rethinking the Inception Architecture for Computer Vision</a></p><h2 id="通用设计准则"><a href="#通用设计准则" class="headerlink" title="通用设计准则"></a>通用设计准则</h2><p>该论文提出了4个神经网络的设计准则，并根据这些准则改进Inception。以下列出关键的两条：</p><ul><li>避免一次性大幅压缩（大尺寸卷积、池化等）特征图的尺寸，否则会造成<strong>表征性瓶颈</strong>，特征图中的信息会大量损失。</li><li>高维度的特征更容易局部处理，解耦更多的特征，加速网络训练。</li></ul><h2 id="分解（Factorization）大尺寸卷积"><a href="#分解（Factorization）大尺寸卷积" class="headerlink" title="分解（Factorization）大尺寸卷积"></a>分解（Factorization）大尺寸卷积</h2><p>作者提出，大尺寸卷积的计算量和它的尺寸是不成比例的。于是将原来的5×5卷积改成了两个3×3卷积：</p><p><img src="https://s2.ax1x.com/2019/10/07/uRSdMD.png" alt="uRSdMD.png"></p><p>然后减少了28%的计算量。</p><h2 id="分解为不对称的卷积"><a href="#分解为不对称的卷积" class="headerlink" title="分解为不对称的卷积"></a>分解为不对称的卷积</h2><p>然后作者想把3×3分解成更小的卷积……尝试了分解成两个2×2，节省了11%的计算量。然后尝试了分解成1×3和3×1，节省了33%计算量。于是便多出了如下两类不对称分解的Inception模块：</p><p><img src="https://s2.ax1x.com/2019/10/07/uRCVIA.png" alt="uRCVIA.png"></p><p>左图模块特性：</p><ul><li>在网络的浅层表现不佳，但在网络的中层有较好的效果。</li><li>由于比原版模块增加了一层非线性层，提高了模型的表达能力。</li></ul><p>右图模块特性：</p><ul><li>能够维持特征的高维度，符合上述通用设计准则的第二条。</li></ul><h2 id="减少特征图尺寸"><a href="#减少特征图尺寸" class="headerlink" title="减少特征图尺寸"></a>减少特征图尺寸</h2><p>当网络需要将一个尺寸为 2d×2d、维度为 k 的特征图转换为一个尺寸为 d×d、维度为 2k 的特征图时，问题就来了：如果先减小尺寸，那么将会损失大量信息，造成准则第一条中的表征性瓶颈；如果先增大维度，那么计算量将翻3倍。如何高效地减小特征图尺寸呢？作者提出了以下结构：</p><p><img src="https://s2.ax1x.com/2019/10/07/uRkv3n.png" alt="uRkv3n.png"></p><p>该结构在增加特征维度、减少特征图尺寸的同时避免了表征性瓶颈和计算量过大的问题。</p><h2 id="Inception-v2"><a href="#Inception-v2" class="headerlink" title="Inception-v2"></a>Inception-v2</h2><p><img src="https://s2.ax1x.com/2019/10/07/uRVxgA.png" alt="uRVxgA.png"></p><p>其中使用了三种Inception模块（图中红框处），包括3个普通分解模块和5个不对称分解堆叠模块以及2个不对称分解扩展模块。值得一提的是原网络中的7×7卷积被分解成了3个3×3卷积。</p><h2 id="Inception-v3"><a href="#Inception-v3" class="headerlink" title="Inception-v3"></a>Inception-v3</h2><p>在论文的后续中，作者对Inception v2进行了如下改进：</p><ul><li>使用RMSProp优化器</li><li>辅助分类器使用了BatchNorm</li><li>标签平滑（正则化）</li></ul><h1 id="Inception-V4-amp-Inception-Resnet"><a href="#Inception-V4-amp-Inception-Resnet" class="headerlink" title="Inception V4 &amp; Inception-Resnet"></a>Inception V4 &amp; Inception-Resnet</h1><p>论文地址：<a href="https://arxiv.org/pdf/1602.07261.pdf" target="_blank" rel="noopener">Inception-v4, Inception-ResNet and the Impact of Residual Connections on Learning</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>随着 ResNet 网络的出现及其在主流数据集上的良好表现，作者想将残差结构引入到 Inception 网络中，看看网络是否会有更好的表现；同时注意到Inception-v3的部分结构有不必要的复杂性，于是尝试在不引入残差结构的情况下改进原本的Inception结构，并将改进后的Inception结构命名为Inception-v4。</p><p>我感觉这篇论文的知识量不大，整篇论文一半都是图，看看了解下就行。</p><h2 id="Inception-v4"><a href="#Inception-v4" class="headerlink" title="Inception-v4"></a>Inception-v4</h2><p><img src="https://s2.ax1x.com/2019/10/08/uhaJjs.png" alt="uhaJjs.png"></p><p>图中是v4使用的三个Inception模块。分别命名为Inception-A、Inception-B、Inception-C。除了所有的池化层都使用了<strong>Avg Pooling</strong>以外，没有什么特别的变动。另外网络整体结构也发生了一些改变，这里直接用网图了：</p><p><img src="https://img-blog.csdnimg.cn/2018102913400312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p6YzE1ODA2,size_27,color_FFFFFF,t_70" alt></p><h2 id="Inception-Resnet"><a href="#Inception-Resnet" class="headerlink" title="Inception-Resnet"></a>Inception-Resnet</h2><p><a href="https://imgchr.com/i/uhwGmn" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/10/08/uhwGmn.md.png" alt="uhwGmn.md.png"></a></p><p><img src="https://img-blog.csdnimg.cn/20181029135504384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p6YzE1ODA2,size_27,color_FFFFFF,t_70" alt></p><p>上图是 Inception-Resnet-v1 的模块和结构， Inception-Resnet-v2只是在v1的基础上使用了Inception-v4的stem结构。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://baijiahao.baidu.com/s?id=1601882944953788623&wfr=spider&for=pc" target="_blank" rel="noopener">一文概览Inception家族的「奋斗史」</a></p><p><a href="https://blog.csdn.net/zzc15806/article/details/83504130" target="_blank" rel="noopener">【深度学习】GoogLeNet系列解读 —— Inception v4</a></p><p><a href="https://blog.csdn.net/weixin_39953502/article/details/80966046" target="_blank" rel="noopener">inception-v1,v2,v3,v4—-论文笔记</a></p><p>以及文中所述的论文链接。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Inception-V1&quot;&gt;&lt;a href=&quot;#Inception-V1&quot; class=&quot;headerlink&quot; title=&quot;Inception V1&quot;&gt;&lt;/a&gt;Inception V1&lt;/h1&gt;&lt;p&gt;论文地址：&lt;a href=&quot;https://arxiv.or
      
    
    </summary>
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="论文解读" scheme="http://a-kali.github.io/tags/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
      <category term="Inception" scheme="http://a-kali.github.io/tags/Inception/"/>
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="神经网络" scheme="http://a-kali.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>线性回归与逻辑回归</title>
    <link href="http://a-kali.github.io/2019/09/03/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>http://a-kali.github.io/2019/09/03/线性回归与逻辑回归/</id>
    <published>2019-09-03T13:21:16.000Z</published>
    <updated>2019-09-04T09:56:45.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>​    <strong>线性回归</strong>通常是解决连续数值预测问题, 利用数理统计的回归分析, 来确定变量之间的相互依赖关系. 其公式通常表示如下:<br>$$<br>h_\theta(x)=\theta_0 +\theta_1x_1+\theta_2x_2+……+\theta_nx_n=θ^Tx<br>$$</p><h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>​    <strong>逻辑（Logistic，又称 Sigmoid）回归</strong>常用于解决二分类问题，用于估算某种事物的可能性。Sigmoid 函数公式如下：<br>$$<br>g(z)=\frac{1}{1+e^{-z}}<br>$$<br>该函数的值域为 (0, 1)，其值的意义为输入特征被分到 1 类的概率。逻辑回归的本质是在线性回归之后加了一层函数映射。将线性回归方程带入到逻辑回归方程中，得到逻辑回归表达式：<br>$$<br>h_\theta(x) = g(\theta^Tx)=\frac{1}{1+e^{-\theta^Tx}}<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性回归&quot;&gt;&lt;a href=&quot;#线性回归&quot; class=&quot;headerlink&quot; title=&quot;线性回归&quot;&gt;&lt;/a&gt;线性回归&lt;/h1&gt;&lt;p&gt;​    &lt;strong&gt;线性回归&lt;/strong&gt;通常是解决连续数值预测问题, 利用数理统计的回归分析, 来确定变量之间的
      
    
    </summary>
    
      <category term="机器学习" scheme="http://a-kali.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://a-kali.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="线性回归" scheme="http://a-kali.github.io/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
      <category term="逻辑回归" scheme="http://a-kali.github.io/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>机器学习中的评价指标</title>
    <link href="http://a-kali.github.io/2019/09/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"/>
    <id>http://a-kali.github.io/2019/09/03/机器学习中的评价指标/</id>
    <published>2019-09-03T08:52:16.000Z</published>
    <updated>2019-09-18T07:01:26.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h2><table><thead><tr><th align="center">-</th><th align="center">Positive Predictions</th><th align="center">Negative Predictions</th></tr></thead><tbody><tr><td align="center">Positive Label</td><td align="center">TP (True Positive)</td><td align="center">FN</td></tr><tr><td align="center">Negative Label</td><td align="center">FP</td><td align="center">TN</td></tr></tbody></table><h2 id="Accuracy（ACC，准确率）"><a href="#Accuracy（ACC，准确率）" class="headerlink" title="Accuracy（ACC，准确率）"></a>Accuracy（ACC，准确率）</h2><p>$$<br>ACC= \frac{TP+TN}{FP+FN+TP+TN}=\frac{预测正确的样本数}{总样本数}<br>$$</p><h2 id="Precision（PRE，精度、查准率）"><a href="#Precision（PRE，精度、查准率）" class="headerlink" title="Precision（PRE，精度、查准率）"></a>Precision（PRE，精度、查准率）</h2><p>$$<br>PRE=\frac{TP}{TP+FP}=\frac{预测正确的正样本数}{所有预测为正的样本数}<br>$$</p><h2 id="True-Positive-Rate（TPR，召回率、查全率）"><a href="#True-Positive-Rate（TPR，召回率、查全率）" class="headerlink" title="True Positive Rate（TPR，召回率、查全率）"></a>True Positive Rate（TPR，召回率、查全率）</h2><p>$$<br>TPR=\frac{TP}{TP+FN}= \frac{预测正确的正样本数}{总正样本数}<br>$$</p><h2 id="False-Positive-Rate（FPR，误报率）"><a href="#False-Positive-Rate（FPR，误报率）" class="headerlink" title="False Positive Rate（FPR，误报率）"></a>False Positive Rate（FPR，误报率）</h2><p>$$<br>FPR=\frac{FP}{TN+FP}=\frac{预测为正的负样本数}{总负样本数}<br>$$</p><h2 id="False-Negative-Rate（FNR，漏报率）"><a href="#False-Negative-Rate（FNR，漏报率）" class="headerlink" title="False Negative Rate（FNR，漏报率）"></a>False Negative Rate（FNR，漏报率）</h2><p>$$<br>FNR=\frac{FN}{TN+FN}=\frac{预测为负的正样本数}{预测成负样本的总数量}<br>$$</p><h1 id="评估曲线"><a href="#评估曲线" class="headerlink" title="评估曲线"></a>评估曲线</h1><h2 id="PR-曲线"><a href="#PR-曲线" class="headerlink" title="PR 曲线"></a>PR 曲线</h2><p>精度又名查准率, 关心的是 “查出的所有正例中, 哪些正例是查对的”<br>召回率又名查全率, 关心的是 “对于所有的正例, 正确查出了多少个”</p><p>这二者是一对矛盾的度量, 因为我们很容易知道:</p><ul><li>如果我们希望查准率高, 那么可以认为是 “只有当十成把握认为其是正例时, 才将其挑出”。</li><li>而如果我们希望召回率高, 那么可以认为是 “宁错杀一百, 不放过一个”. 查准率和查全率的曲线又叫 PR 曲线, 如下图所示：</li></ul><p><img src="https://s2.ax1x.com/2019/09/03/nkRp6J.jpg" alt="nkRp6J.jpg"></p><p>通常情况下, 如果一个学习器的 PR 曲线被另一个学习器 <strong>完全包住</strong>. 那么我们就认为后者的性能优于前者. 当二者存在交叉时, 我们可以通过四种方式来确定学习器的优劣：</p><ol><li><p>计算 PR 曲线与横纵坐标轴围成的面积, 面积越大越好；</p></li><li><p>利用平衡点 (BEP, 查准率=查全率), BEP 越大越好；</p></li><li><p>利用$F_\beta$度量, 当 $\beta&lt;1$ 时， 查准率(精度)权重更大, 当$\beta&gt;1$时， 查全率(召回率)权重更大。$F_\beta$的计算公式来自于加权调和平均数：<br>$$<br>\frac{1}{F_\beta}=\frac{1}{1+β^2}(\frac{1}{P}+\frac{β^2}{R})<br>$$<br>$$<br>F_β=\frac{(1+β^2)×P×R}{β^2×P+R}<br>$$</p></li></ol><h2 id="ROC-曲线"><a href="#ROC-曲线" class="headerlink" title="ROC 曲线"></a>ROC 曲线</h2><p>​    很多学习器是为测试样本产生一个实值或概率预测，然后将这个预测值与一个分类阈值进行比较，若大于阈值分为正例，否则分为负例，因此<strong>分类过程可以看做是选取一个合适的截断点</strong>。那么到底什么样的截断点更合适呢？ ROC 正是从这个角度来研究学习器好坏的工具。</p><p>​    ROC 曲线的纵坐标和横坐标分别是召回率和误诊率，下图为 ROC 曲线图，实际任务中会利用有限个测试样本来绘制 ROC 图，所以产生的大多不是平滑的曲线。</p><p><img src="https://s2.ax1x.com/2019/09/03/nk7o59.jpg" alt="nk7o59.jpg"></p><h3 id="绘制-ROC-曲线"><a href="#绘制-ROC-曲线" class="headerlink" title="绘制 ROC 曲线"></a>绘制 ROC 曲线</h3><p>​    假设已经得出一系列样本被划分为正类的概率，然后按照大小排序，下图是一个示例，图中共有20个测试样本，”Class” 一栏表示每个测试样本真正的标签（p表示正样本，n表示负样本），”Score” 表示每个测试样本属于正样本的概率。</p><p><img src="https://s2.ax1x.com/2019/09/03/nkLzOP.jpg" alt="nkLzOP.jpg"></p><p>​    接下来，我们从高到低，依次将“Score”值作为阈值threshold，当测试样本属于正样本的概率大于或等于这个threshold时，我们认为它为正样本，否则为负样本。举例来说，对于图中的第4个样本，其“Score”值为0.6，那么样本1，2，3，4都被认为是正样本，因为它们的“Score”值都大于等于0.6，而其他样本则都认为是负样本。每次选取一个不同的threshold，我们就可以得到一组FPR和TPR，即ROC曲线上的一点。这样一来，我们一共得到了20组FPR和TPR的值，将它们画在ROC曲线的结果如下图：</p><p><img src="https://s2.ax1x.com/2019/09/03/nkOQkF.jpg" alt="nkOQkF.jpg"></p><h3 id="ROC-曲线的意义"><a href="#ROC-曲线的意义" class="headerlink" title="ROC 曲线的意义"></a>ROC 曲线的意义</h3><p>​    有助于选择最佳的阈值。ROC曲线越靠近左上角，模型的准确性就越高。最靠近左上角的ROC曲线上的点是分类错误最少的最好阈值，其假正例和假反例总数最少。</p><h2 id="AUC-的含义及计算"><a href="#AUC-的含义及计算" class="headerlink" title="AUC 的含义及计算"></a>AUC 的含义及计算</h2><p>​    <strong>AUC</strong>（Area Under Curve）被定义为ROC曲线下与坐标轴围成的面积，显然这个面积的数值不会大于1。又由于ROC曲线一般都处于y=x这条直线的上方，所以AUC的取值范围在0.5和1之间。</p><p>​    在进行学习器的比较时，若一个学习器的ROC曲线被另一个学习器的曲线完全“包住”，则可断言后者的性能优于前者；若两个学习器的ROC曲线发生交叉，则难以一般性的断言两者孰优孰劣。此时如果一定要进行比较，则比较合理的判断依据是比较AUC，AUC大的学习器通常性能更好。</p><h1 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h1><p><a href="https://hellozhaozheng.github.io/z_post/计算机视觉-计算机视觉知识点总结/" target="_blank" rel="noopener">计算机视觉知识总结</a></p><p><a href="https://baike.baidu.com/item/AUC/19282953?fr=aladdin" target="_blank" rel="noopener">AUC 百度百科</a></p><p><a href="https://zdkswd.github.io/2018/11/20/精确率、召回率、真正类率（TPR）、假正类率（FPR）ROC曲线/" target="_blank" rel="noopener">精确率、召回率、真正类率（TPR）、假正类率（FPR）ROC曲线</a></p><p><a href="https://blog.csdn.net/Libo_Learner/article/details/83615715" target="_blank" rel="noopener">机器学习笔记~F-score beta衡量precision和recall之间重要性</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;h2 id=&quot;混淆矩阵&quot;&gt;&lt;a href=&quot;#混淆矩阵&quot; class=&quot;headerlink&quot; title=&quot;混淆矩阵&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="机器学习" scheme="http://a-kali.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://a-kali.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="评价指标" scheme="http://a-kali.github.io/tags/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>Kaggle 比赛记录之 Severstal: Steel Defect Detection</title>
    <link href="http://a-kali.github.io/2019/09/02/Severstal-Steel-Defect-Detection-%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
    <id>http://a-kali.github.io/2019/09/02/Severstal-Steel-Defect-Detection-比赛记录/</id>
    <published>2019-09-02T02:18:54.000Z</published>
    <updated>2019-10-16T15:08:55.522Z</updated>
    
    <content type="html"><![CDATA[<p>​    看论文看腻了，正好抽空看看隔壁的 Severstal 比赛。希望能吸取一点之前的教训，在这场比赛上好好发挥。</p><h1 id="比赛概览"><a href="#比赛概览" class="headerlink" title="比赛概览"></a>比赛概览</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>​    大概就是一家中国企业为了提高扁钢的生产质量而希望使用计算机视觉来检测扁钢损坏而发布的一场比赛。</p><h2 id="成绩评价指标"><a href="#成绩评价指标" class="headerlink" title="成绩评价指标"></a>成绩评价指标</h2><p>​    <strong>Dice系数：</strong><br>$$<br>Dice(s_1, s_2)=2*\frac{s_1\cap s_2}{s_1+ s_2}<br>$$<br>用于比较两字符串的相似度，大概就是两字符串相同字符的个数乘2比上长度之和。这里应该是用来比较 RLE 编码的相似度。</p><p>​    提交的数据的三分之一用于公榜展示，剩下的三分之二作为最终成绩。这意味着可能比赛结束成绩就出来了。</p><h2 id="比赛时间"><a href="#比赛时间" class="headerlink" title="比赛时间"></a>比赛时间</h2><ul><li><p>2019.10.17 加入比赛、数据公开和组队的截止日期。</p></li><li><p>2019.10.24 提交最终成绩。</p></li><li><p>2019.11.10 高效奖争夺最终提交。（该比赛的前 50 可以进入高效奖的争夺）</p></li></ul><h2 id="这是一个-Kernels-only-比赛"><a href="#这是一个-Kernels-only-比赛" class="headerlink" title="这是一个 Kernels-only 比赛"></a>这是一个 Kernels-only 比赛</h2><p>​    最终的提交文件必须在 kernel 上生成，比赛者需要上传模型并在 kernel 上进行最后的测试。并需要满足以下条件：</p><ul><li>单 GPU 情况下运行时间不超过<strong>一小时</strong>。</li><li>断网。</li></ul><h1 id="比赛数据"><a href="#比赛数据" class="headerlink" title="比赛数据"></a>比赛数据</h1><p>​    训练图集、测试图集、训练样本数据和提交样本。每张图占4行csv，分别表示其4种损坏的RLE码。</p><h1 id="EDA"><a href="#EDA" class="headerlink" title="EDA"></a>EDA</h1><p>在做EDA之前先说说自己对数据的想法：</p><ul><li>既然每个样本有 4 种损坏类型，那是不是每种损坏可以单独用一个模型来训练。</li><li>扁钢损坏率似乎不大，这意味着大多数扁钢或许只有1-2种损坏。</li></ul><p>以上有待EDA考究。</p><p>让我们来找一篇<a href="https://www.kaggle.com/go1dfish/clear-mask-visualization-and-simple-eda" target="_blank" rel="noopener">点赞数最多的 EDA</a> 瞅一瞅，得出以下信息：</p><ul><li>训练样本数为 12568，其中有损坏的样本数为 5902，接近一半</li><li>测试样本数为1801</li><li>图片长宽为 (1600, 256)</li><li>四类损坏的数量：{1: 897, 2: 247, 3: 5150, 4: 801}，可见绝大部分损坏都包含第三类损坏</li><li>每个样本具有损坏的种类：{0: 5902, 1: 6239, 2: 425, 3: 2}</li><li>第一类损坏呈密集斑点（猜想）和小矩形状</li><li>第二类损坏呈长条矩形状，似乎是刮损裂纹。竖直长度通常大于横向长度，一张图只有少数损坏。常伴生第一类损坏。</li><li>第三类损坏常呈现大块状，边缘较直，出现概率很高</li><li>第四类损坏扁钢有明显不规则突起，形状十分不规则，常伴生第三类损坏</li></ul><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul><li>那个网状的钢是什么？有没有其他形状的？</li><li>有没有哪些易于被混淆的损坏和普通纹路？如果有可以进行可视化来找出原因。</li><li>根据类型比例来设定阈值</li><li>统计各类损坏的密集程度、长宽最大值和最小值以及比例、mask size</li><li>统计两类损坏之间有没有伴生现象</li><li>不同的类型可以使用不同的minsize和阈值</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    看论文看腻了，正好抽空看看隔壁的 Severstal 比赛。希望能吸取一点之前的教训，在这场比赛上好好发挥。&lt;/p&gt;
&lt;h1 id=&quot;比赛概览&quot;&gt;&lt;a href=&quot;#比赛概览&quot; class=&quot;headerlink&quot; title=&quot;比赛概览&quot;&gt;&lt;/a&gt;比赛概览&lt;/h
      
    
    </summary>
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="语义分割" scheme="http://a-kali.github.io/tags/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"/>
    
      <category term="Kaggle" scheme="http://a-kali.github.io/tags/Kaggle/"/>
    
  </entry>
  
  <entry>
    <title>ResNet (CVPR, 2016)</title>
    <link href="http://a-kali.github.io/2019/09/01/ResNet-CVPR-2016/"/>
    <id>http://a-kali.github.io/2019/09/01/ResNet-CVPR-2016/</id>
    <published>2019-09-01T15:48:36.000Z</published>
    <updated>2019-10-09T02:51:22.799Z</updated>
    
    <content type="html"><![CDATA[<p><strong>论文地址：</strong><a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a></p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>​    众所周知，深度的网络使各层特征和分类器在一个端到端多层网络中融为一个整体，最近的研究也表明网络的深度非常重要。但网络的学习是否像堆积更深层的网络那么简单呢？一个阻碍深层网络学习的阻碍就是臭名昭著的梯度消失和梯度爆炸问题，严重妨碍到神经网络的收敛。这个问题由于归一初始化和中间层归一化的诞生得到了一定的解决，这使得十层以上的神经网络在随机梯度下降的反向传播时也能得到很好的收敛。</p><p>​    然而，实验告诉我们，更深层的神经网络容易表现出<strong>退化</strong>问题（随着层数的加深，准确率达到饱和然后迅速下降），而模型退化的根本原因很大程度上不是因为过拟合，而是因为梯度消失问题。</p><p>​    退化问题表明不是所有的网络结构都能轻易得到优化。假设我们有一个浅层网络和一个深层网络，深层网络的一部分是浅层网络的拷贝，其余部分为恒等映射。在这种情况下深层网络不应该会比浅层网络有更大的误差。<strong>而导致深层网络比浅层网络准确率低的原因是深层网络更难以优化</strong>。</p><p>​    这篇论文将介绍一个深度残差学习框架如何解决退化问题。深度残差框架没有使用直接堆叠网络层来拟合期望的映射函数，而是选择<strong>让这些网络层来拟合一个残差映射</strong>。比如说，我们所期望得到的映射函数射函数为 H(x), 那么我们通过残差函数 F(x) := H(x) - x。那么原始的映射函数就可以通过 F(x) + x 得到。如图所示：</p><p><img src="https://s2.ax1x.com/2019/09/01/nS6Rc8.png" alt="nS6Rc8.png"></p><h1 id="深度残差学习"><a href="#深度残差学习" class="headerlink" title="深度残差学习"></a>深度残差学习</h1><h2 id="残差学习"><a href="#残差学习" class="headerlink" title="残差学习"></a>残差学习</h2><p>​    假设 H(x) 由几个堆叠层组成，其输入为 x，并且其最终能被训练为残差函数 F(x)，即 H(x) = F(x) + x。其也能起到所要求的函数的效果，但是使堆叠层训练成残差函数的难度和使用残差结构训练的难度是不一样的。</p><p>​    引言中所提到的反直觉现象促成了这种重构。如同我们在引言中所讨论的，额外增加的层次如果都是恒等映射，深层模型的不会比浅层模型有更大的误差。退化问题则表明，由多个非线性层的叠加而成的额外层很难近似于恒等映射。<strong>而在残差学习的结构下，如果恒等映射是可选择的，额外层可能会简单地将权重降低至接近0来实现恒等映射。</strong></p><h2 id="快捷恒等映射"><a href="#快捷恒等映射" class="headerlink" title="快捷恒等映射"></a>快捷恒等映射</h2><p>​    我们在每几层之间使用残差学习，如上图的结构。在这篇论文中我们将残差块定义为：<br>$$<br>y = F(x,{W_i})+x<br>$$<br>x 和 y 分别表示残差块的输入和输出，函数 F 表示残差映射所需要学习的函数。上图中的 F(x) 为：<br>$$<br>F=W_2 \sigma(W_1x)<br>$$<br>其中 σ 表示 ReLU，为了简化写法忽略偏置项。之后 F + x 通过快捷连接来完成，之后再进行一段ReLU。</p><p>​    第一条方程式中的 F 和 x 的维度必须是相等的。如果不是这种情况（比如当改变输入输出通道时），<strong>我们可以添加系数矩阵 $W_s$ 来使得 F 和 x 维度相等</strong>。<br>$$<br>y=F(x,W_i)+W_sx<br>$$<br>​    <strong>残差函数 F 的形式时可变的。本文的实验中包含了两层和三层的结构，当然更多层也是可以的，甚至可以用于卷积层。</strong></p><h2 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h2><p><img src="https://img-blog.csdn.net/20171218163309386?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvUXVpbmN1bnRpYWw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><h1 id="ResNet-的意义"><a href="#ResNet-的意义" class="headerlink" title="ResNet 的意义"></a>ResNet 的意义</h1><ul><li><p>从关联性的角度来看，残差结构使得深层网络和浅层网络的关联性更强，输出端的损失能更加有效地调整到浅层网络的参数。当网络层数过深时，优化器会调低网络权重，使得反向传播“选择性地”使用捷径。</p></li><li><p>从函数角度来看，残差结构直接构建了一个更接近”绝对不比浅层网络差“的结构。</p></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://hellozhaozheng.github.io/z_post/计算机视觉-ResNet-CVPR2016" target="_blank" rel="noopener">从零开始的BLOG</a></p><p><a href="https://blog.csdn.net/Quincuntial/article/details/77263562?locationNum=6" target="_blank" rel="noopener">ResNet 论文翻译</a></p><p><a href="https://arxiv.org/abs/1512.03385" target="_blank" rel="noopener">Deep Residual Learning for Image Recognition</a></p><p>恺明大佬牛逼！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;论文地址：&lt;/strong&gt;&lt;a href=&quot;https://arxiv.org/abs/1512.03385&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Deep Residual Learning for Image Recognit
      
    
    </summary>
    
    
      <category term="论文解读" scheme="http://a-kali.github.io/tags/%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/"/>
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="神经网络" scheme="http://a-kali.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="ResNet" scheme="http://a-kali.github.io/tags/ResNet/"/>
    
  </entry>
  
  <entry>
    <title>Aiming to 谷歌机器学习冬令营</title>
    <link href="http://a-kali.github.io/2019/08/29/Aiming-to-%E8%B0%B7%E6%AD%8C%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%86%AC%E4%BB%A4%E8%90%A5/"/>
    <id>http://a-kali.github.io/2019/08/29/Aiming-to-谷歌机器学习冬令营/</id>
    <published>2019-08-29T15:02:43.000Z</published>
    <updated>2019-11-05T15:20:32.876Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19rzUlIapR4sWCJ78qxKWVTOeyssvdm4+RJMzYzrG0BbuaxBSusszIutHhwfrX+UJ1k9YEhyQW9TyZhBOCZ9XiCd5n74fWh/HTjyZEho3+6d038O3Gorf5YyRaQqUNzuRVFl5UahtNAhYyK0T8f60w20v/B2vLKxNL8vaXrRT6CF28Ml1TRMRjOifR9ylfclBbbt+By3xg+TiMiyMY4XSCrUGyC/7w2vPOaHbPOyx/CdLpMVFyB5Cz4nNVlINDsqrRRrghfufua4M5pG71jfZe4VVGvM59unh9toiPJx7OkxcAkESKzUQNuCY3VOrCjMMrUkDo53nC4Ezbw9yYehIl7CzQVekkVWptBxtMG0KnM4NS1S6D8HV3V+wrL/a/ENnPcnWwEVFCLVFFmWygUEwh06LK0WWq7Xsilyulrnu/oHrUEwpHQ5Ib+nPoegZp4kS+LqNUecZfN+QyBCcNddbmdW6u+tOTv3xntcQUZhuL1lXYHLRxG5b/txOIzdw4BjjxxOUcrLKwL2RC58BxPs4btKRdV9UmlKg4E90LHockfxMV8d8txHxqLNjeBqL6Ot4KHQkdxmnRTpsTHHqxqus2MKYxou3f66Ed30pSqUruA2aWsXUNGwG0ba0AAqHb4i/SzIxDO+kiGX7ZiVBjyp34m1gy7HrV2xsqZ8JgUYBAKrtqFbbBG2QYKNLjhCNzilDsrvA6H4Fvv3ghqoKjetvG8b+XhCbF59ju8GYaF7wFyrrwuy9mYWBQzEntZPLgrvKYy5lOlFbqmfAcRuWbXgUoRJ2R1bjhxuZkK2+CFkCdWnajUJy7N7YEABDruhFRn+AKUtiDgL5iRxt8BtvFlXhyTX5YWwdAnkbTaHUrXnYnpku4BjpKg/RZ1j2fAmY4vDdXOVsDbBbOmk2IxZpV7DaRWSZUAkxTvOTxh0ENjpvgStUNEGjpGNpZapQi/rEy1CejP5I+IiL93W+PlxJ1UB1/rg4lmmin1oXzy8xuC02X9BAZX9rjofKyarks0uOp0aO8/3c97TtN6wWMuznqijiWh+vEe/dNI8i/c1lO8+IOSRsXwbHuy7JJxqeMUfpy2egHpNL3IocvQXyj6vSp3ioD4jjhdu31CB3sXIRlA/xbzxgZgG7P1X8lje14PzU6SgcyCbXv+/wxqELkfvtdnuPk+CQ6FJ8ttfgAfesVj8wxuJqLNrwi47God3qx6Ibh/tpxAgyXZ5KDMCgz4ndgB1VlSDRMJCHQWNZLKKtkXw8NlbpfmGK/YJvTuaoRnnvx6Ekjk44p+E18pZny1nU8zvVnY4P3cr8IIOvwJ+C3RQumtFxkzwDMtnqH7k592Og23+i3ttBoCkdJttY5qqmMtfiA9BfNdfarcgOJxQELk+HQNM6b8bhlpk5IejHGfU3KJbbvbsmR6L/mtKXf77QuDDOH3HJNYyaL57hX0gqx169/yh8pVajfPRLn9dcQsJB2LCYYjj7By0qjeREb5N+ad9Op8cutJ45pOZpxLxXAiXuMJYZPKjgOdgHP3WVcO5nAu0CvGx84LlKUcSKXAScuPUAFvQontaz9Ixvwj6eYeyjD9cqwmcyNgnUy3R5F8f4p/TAVKMeyl1JzpEdq9VtfPPv1lxN2HNjJKqEICt8aLE+IYjZ/2E+iKHiNk044aWB6zKXBhdMZ9xyejwyr69GhmrUnotMKxOak0L3A0KBMF9HrZHj+CXpc2yduQtZq044ABfLUcsK+fZ/Xdyh8ZDExnMbVSWaiECauh0eGY154TV9XW86VpXX/CatLr1GwcNi5Akv0gzWIPs0BlRYOCCTfZ/06KgHul4HZCytYelyYgbaR6Z1ibkRchZIX9yrNx0M0iUf49pgdOVdlZjmccxiEhbKN3Huz+/vPIkM0jDg9PdkZIf1Tj5h1vA3gR/K0v3boHXJsL3ARXZQhY0I40WdHiQXNffOU9gf9l120er7ui9+F9hFJFAqfb+LwpjMjQTHyZEOrk3ix6pWypF7Bqk63PTX1+IB0ubXKJuHojKQplTX1k/qquHt3lhKQLKJHpjwPDD7xgGi5rV7Db4HT+7/O6BZqmGW0UYssi4Bu4wIDQoTP392ElG+4/a8j3MYEVxrGgP0qKoLw2XOHTvQaW5ERp7ZZGjtz99k1yTx+fNEZWe3ufhipqeOzW783JO8HI2lcZzLP0HxPaPX/q3ADp/spLgDvB1vNqxomLdR8vGJ2gmZySPyYTuMAtxjR6RN7wze5yOt0Yd1XREnGXZommZ0UBE1h41SLlmm+sZjFSPQZupjZyID5mMRlpmFgzshpMlNyZAv1zibmwHecuEVS/wlWaX0GT47vTNjVyXBRNm70qDUKiGjKo4OQQNbgMEOScxJyfeV20pHGZ4q1tNWUvMxonpLRQ8oVau5BMvbB6g973/Tqn3vVOmnZ9kJ1Q6rLYS56doe//LciMrTzkInBl8mc7i5cBvTL2FDuMPElRjoB/gFHIwh2p0rcxPxZZ7Qw7K8kQPhBxO/1toP8t3TeEQ6Tshnr77LXKNmrRpfCC3BuaH2pw41lfNSko0fQ+hvQoc103ZcHFyYyr/ME+YlPnWhJn1TIXOxA/Xfstvqlg3xUL/5RvFim/+jvIl/p+hb4yMAHtzCi5w1GIqp9rWhD5L7oGpMWY9Woz0M4tVuJsNhJU9ksBoDHI5vmkWNDjXeFOMrswEfWYU7iLfVbmdxNVNOkm5n/ns0/UINScJ+XyD0lx5Mh12fnb74nsNl1qA9x9a1nCqqII9tAPQM6nw7OVhQda7TbcYCBR1fisTbqmdUKIKJm0scduGjBS5aFsXjERh8Fv3QcajVPWgNFXlB6NeVzI4I/6pARys5YafbukdyMokbcaGJ57UP2By4NnrXAoPGPc+JrndSPwv/XcWPzocR3nMdCWFGuvJR1iVs8vVby5mMo7tzXULKdXkbOw3zwA9EqlsVBKJtsidI3j7FCKTq5uS/tkNxh5TRS4KfCnpY6PX++IIDXEq/0RjAPVjikqYl4st0LeYbda7GGx4A8EM31L1RElqns/ZUoIRKHHb9Gx9U3MmKK9+wVoVcUqo2ehQt7DEC+VDRYBaLwpeZAMKMg/A9JekTp6+U4igXLSHQRMo5Htp3Iz29IKtqO5069tjOZgjvIm2NwEAb/XHKUtaes/THBgdSvbqEaGslhqJN828XW0BqhxqCMlSUQm8lwKf0CZI9MB7Gs4zNRt0BMYyz55zr87rn4rvFnY9FUIZqksxF3jFKvK3YDGPjyWQyPwCZmMqeTtWrqfPxKmRUWKHWguqZs53qpTIgLU0b79c7ySKMLn6fKem8kyECNGAFcrrrI3Uol6U55dbZVh/M2o2C0vEnDPYzL4hsmrYxltU+D/Fl31NG/OF98JfqUbuMefAlWTW1IfQzFDOfJNDeL3bKAqvDpGKAUvjBOKt/c4J5NPjQjyeJd2vmDg2rj4JkRnUBa90Pc93N9fNKP1wJvlGNzwCy3Ejzgbwl29HPjwbaU7UFiokc9BOFaeXNRL2yqQm8GxoMQxFjXF5r/UNVgKo0p+y12ynrWYQC4kGGREoSMIAoK/xC61qo7afkARava9mhYsh51u0fpa/TS/HVbrtOFyVvGvvNs7Fq2lu4by4eKhed7qtJ+K88ULCtLgFyF94SupwpMsxkNxVxSP2/TXkKCGjzZXXSorsa+kBu5RWVYVSCjuF6+0/8tVaL7rlTBTja3Mn7Q/5RsZ8AO6lOHJA53biYvSawbmOivPm/VrMIEshWRDT8w6faU00OzEU8sBcCHA4eKqkoFTbqnpr+GzJlipTgwk7zk9T1tz+MB2XmvPdB8d8t0hIkVkWxFfAOC2yUG4n1MEDIyERhZTpOySXy8H6fszG3dKYtbrgZnFG/wk+9OflQik0oxryY8uvetVTOf1bdeDsahP7s+SjB69xoFyGt94lKSKnGf2RxdoE5n4t7pyOsIAT4cAG7qqMYr5AbdU65ly1U4YBJTefffQHraTCYmfWD92qrrVptivn4iMlsx5S+0AZ7BZ+TH6W2Daxn+yXn90FXJY9ILd7FxgyKMlMuzaNH8Fll7cOhrDoZJIUkVm335skpROVmp38cCHTZVbMrmLoBG4ITabqWRMiuM2J7jfRdsPldgbkdZQBZafIwrwY9i5b1d1IM9k8PUN+FpOFoMkkrddKKcK+dbvcQgZW7A04uX/iFxR23ORgVQTlPZ7SqT3VFa9hOzjcQ3XaNdFyRDdcKc5Wnv1vA/HgJA7B/PBq7DJXN5L5q/heJNsc0+9S9ieUZiMq6oIX+9FYkfBKX1co8TTXWeGIwwGzZ2S5VDDzFf0sYy29kQAMNuakyUc7JmXMdrN3toiOM+zJYzZJHaGLFmC4x1mjsNk6MxOMs7w+XVsgJETubGFEEw2K7F58iCM984yM4uMjq4LuIoqiSqVIuH4+c3DTmAmh0AufGNFRlts2wfw9ZWypSZUkIwjsKwyOcuRcsx+wa94izHjFXb8RRzD9249PU2QrMtdndR7L5izUN8j0YVEgR/Ypndz8wLIfj6Fx5DYGzKTmSjjE7hbWNnISdCe57Jbn4tfc8hiUZiW0k2bRlqSR7IvwO/bu++nHWzjuiJheWeKc5SvduVYx0N0aTfVQpYbgT2sEzX4wAbStbuXLkiNjTPZXxvPvV/yxyDfJdOSOW5/9qwsvGXN7GHhtl5Zmcu/2oCmKqLoPapOy68WnNjaut6CSNwfQ3s8Q6sdF9ukea60i+CA6efFrE5uJdMTBm2cNoDGg9U+/BBmEx43f8ThHJ/yoseRwasK+RMOV6ooeodXOGDPUnZY9VWnCvCcD8GQL474n4d5zvTSobiQ18O8xNcLnxpoPf2AWMTqQhTWs6J8OGdGJjG+O8tX8N1HFTPIcYBAOcGfJpRWkYLDTaCBpSVI9AqzPXJ2vpbJjCyHt8o58sTAIdr1yc8HbgYkjDtjV2GXF4mbNOjc4P1GrySUqsnlpCggWJ99Fu4DNfbNz2c/FBuzM6uhdBWjQ40S9a99JVXpRKpoVutEeyTf+pJS9fUi6dyiB9g/awwsKJSl47CG0oK1Z1el7AKG/l6Racyrko3WTHHDpBsg4R+oGEMzy1eKKnH33+d3kSVYEEWFTwbB42HM99v8vRl12+AGvzaQi/7ftVxVLMsNMuBsXiUZBGAbay868dA3c5tkPICW/Uvjsj/0nu1+12Hm0D2G2Fhj6hd3fhIH8Kp0ddnahoQvvcmPgV7b+F2BBjWiFeNtiGEN9ppJLOysrAfb08XHARQ/tIxBB9iYq+dqq/H0U1oYkr3/QmMTAgedwVgCGakqewOpanPgXrMdWvShUE2vXpSOORIjdQss1WtErCPMiO6yQBAoad1Tw6jExwjI7giNKTzPpXByHIcgeshYZMldgouFCAlvw8uDmkcfjo2p63ZEEhirNycJEJ5lDGNejoc1wG2/FpjzOVbbPOU3npC9NECfUIvjz68AMUyU920dE6llmSO9vwuOIFdbTVr/WvbX6Karv1O4R1KQ+RWFcTM5wpZuVyfjVUAFddUZlsIII90M0BoCaocETK6T+pIlIWL1WP7yoh7tETXGzhFwA5hDyb1GKjg7UthIpYXmekJJiniTAjQoy2JW4Z8Snk6s3x6M4fSO+74cw3TEsNuXeW6sQuVSX+IlK3E6elQ/r7t7VT7dDBLafmbldzFjUPlfJx4UK8EJjPqVKaICf4ZSl8d93cdveu6n1G0DdxnzyULFJfe2eX4geRyrdtbTX/n9Qg8o76a0Ynj9Bjo66yCCnfH4Z7lQfIFnJLJ7KbA96LERVfwGS7jmCV+VZGOpvPlBAF/rTxynGYWuhpofIh5h5r4TgKNortyhLUPNkdkL6v3GYJbjWBZKEqc0nzYOEuO9UFaqMNzGMuaoXCXxlVcz4Vhtqzbe2n4r6QSmByepHMjX6iS1niEPYR/ckQNEhb5OgWc+ALLk6OZQuypYnNuV0LoqHnQQxKxkLrCMMeU5spUVpNRbEGpTNakX7HRnUTZYaoTRJ79l9At6Swb+2Q09mFPO988jtErD3kQXBrMxzQ3P/hrAeoQc37Lq/O9vBIu2wCDTegiyCk7WYQW09aRj9Ui1WDKxZq9TRv8lYEoi4UXwIXwWPVuiL+pyrG9xTPWPNhXxMY72/Vc2HTCAb4pGYIfT7n+CKc+Uo/5oFTj9h/kfwQ51ErnUOKPJJs7LXd0K17bxh/Ybxgxbt0FPoJIgiSbmO6rfuZeqCWk86IBXk/GsDIdfsmETAXnKw+ecc8srokWfKxtxUMCConbvffMSwmGtdpbjAj32owbfzgIzpwDl2wYe93VNp+AJzxdyZlzL5DzBiMiUj3bZsMFk5sFaN4CeXHqFWj+h9RVbQtEHpRJOFrWw3J6vtmffvHYuvnNVhvWLy0WG1a4Df5FbBAj5L04PiZ0fhOe/+37IA2Qp+crofpVQVm6bqzRO2EOucjFo9/ENm6t9ePE6ZYoWCLa4MnDtgukxnUsA54OutBgTVzJ57+axQ0dbvAcQ4JBKP6+K4Z/i4KqHakkHNYp2eWRwZtdUzvhEeYbJqa87aMNEyPkOC20eAhANKL9VLQharcxgjbRGb23LIv1mIWjvytYjDstjtC+Uf35S+UrsLTsbTXa0/Eoe5sVfMFRSkOI5Be9CaopK6fWKro3YU/80YswkHOCELDb9wdda68+mv1LeD2+WURVy64kyvhh+L1+fMFyGDhrT4byDIQ+6TUebq0vA771Y3fsJn2uSiGgTK3/OPxpYbW4+5cgSMleX0BQy2ch0CxJL/wMLW1jShPFVuM+nNs3jJEDOsXV57LM1QmY7oc7M0J2XAHdd19gp3KeqlqIOCjb7bt1ETFDt4VB1Nv5k1a+TAphvzqV0xhGkJDOCbtD8F5ijAdhhj6fE+7jGf/OkqcCT+mol64DKjvewMizSQ9oCvBtDK++ahFFAti8AWc9TINn/8YcA4FDcgddsDbR0y1ENHdCv5hvTbdQfwecPFqCy1t/7AKtz4o2GuE8S1/CIUw36PnzBkiK5NTMGgMV8coQGEa88Sjt6FaQG2DLapzsWzCVBVNp5o2VO66Iknv9687ywE0u56vMdhThH/4wXsd001zoA6Ak/dXptpPGKwEP8XO7sxisvTvDNUc5WIEg4XlVxWGQ97q8iexPT3y3qcsXn43nipprlXTKwXqkLotVHRsIkM3QYjMygod8ktxC0tLvNq2SDnDRhbtb24X9aF++KeW1dbSq07MGUQHZNDl0TlkUD2ZH0UH2dBBFJCaDzVvJJRuO/vzRseYbWLKzmgScjEK16QZ2CXatlSF+zmDJ6bAjSVoyER8vQ8zAXfujyYYrVmczenqOe3Za300THPVUk7ji+JMidzvbe71Ky4dYKwsHLWDb4PcUNnF0FyygEL1KblR0OAY0lEk7v2GDW3qtJCDAZXIQ/rc7yt/fSyFWArozqShsjcq88hOt75VMYDfc2ffUYsgdxHViKLPMksSQmFodSG1q0M4o1QAxB+38mhLYjy3ZOSKEKjvnjIBM38Zve7boU90FD5pAB7OLhz+W0imbh3Xqrly1AatSN81cxgGb7wZ5lzOwut8EZspx1bLimF+tkwyVhnoyf3zYNqnYxGGnFLxqnoSkdQvgM6Psr+AlR1a+/42q3ndo4cFlH7cb2U9EOH1BdOEWE+2ZANZx2hNFv7tUgARKv1FcLG44vt4+wVxFXM9QHfu3RNNECWyf78KC0sYbQqzzNnk4yuOOU1A/Gd2HbPbdnqdRgVGhlLer+oR59nlKLcrGM0xj1F0MCa9HZCXEIjtw/i/xzhqkMyUb0B1fSqtm/U+CK7OINbm5ryCQ4Cfh5TPRvT619yDdXcDZkc3eObgWtb1CuFHuz3TzOQ4lF9lFJ85RTks7/9JIitUvo3F6qUxv53r/izYTOk7tHZQnLTl3U944QqtfxSko0ZPvyGyUCFbVTW4Wo/dXw6Skifu6IlKagXli/o5iZyW/b1u6Y3haMjxgCn/36tnLYqade+VpfKxNheY0gndajL9wTL8+JqeosFgbKCP1wxQGVgKcIaewl7WF1f3c2bI4SSNUSkcdZhbRpUxTpXDFpmmQZgoi5jU+rPJL381LTB19HQQTcfvx/IaTn+FDbegN6dIXkZU7Z2Fc0jwwHoqiPE+/uTLoKmhkXP4scj2lRBZ3LL1Svzga0hk+BHMu5UWfeymWZaaSXl3jpYfkezISrfpb6e2+ZjlkjM2PvAPXfwd6Bl5/bgIxmFoemigwu/HH7E62epr7vko16/Yk/PYcH1aKavcrWzrNYJNz6odqDYLppcDcRjt9zJdG4TEYvie4GNAhKZ4Y60xZjc5ZH8virrRqANEpzqrdso7LidF4LMM5B0aM2XV/YDz6lazzwxJnThn+rOyXaTvVM+9KrDXgL6kB97rVOcsgkWs4aQGmA/C4IMAqE0/cc8o/HEZ08FycNTvwHM+3L2sfGTEdwmyP57ONy/WJXQZWUfrg3zEQUn6EY+SAR5i/guWwo/wycD8iixBZvDkbfjcVzfUk5FBdexlQW8WidALgwLv2kdCoKqkpGbqW8OlQtZhSi6mbTeeI7TnM8dLorvkucAOUescE6EtLiKeWI4r3wVxXWc1PawrkWrTM8gnNiTDBxDfxHQsKLxZFjMhB1bcTQv8lUBWbt+Z4KgH+3J58NZMysE0MHSkVeCkdCKfLMYtZps7GuBtc1KiSubCTcJvlL0+WdUT0yCgAf626rjBMDYhz6b85Kym68mOZFJL6TnfFo3k/5CSkqgX5YYl0D81WJsGKBh0OgxkhZDU1/QRDDTqXZawCxregSPJJejJvKTzvyGdyasilT9YWXVFk60abEcHs+8e/xB2eenpkDpwf70jYG2mH3cf+xCVqQz5QHZYVd0s1Urr8bB6T5YBgzYbVu9te3nMW9RVQV6brcvQJRXMfzBrCf647koUdM+diYKwCCDOw79RscijjswtcQclMQBGhSU/4JFyHDOqxXKeILVc7tWk8oRc3odwgeUOz9nSeziG7cvmHwmTABUb1F5rdWMaKsnhv0J+quJTNoAIOg2+zty3Lck5PPMt9Q3yVfFlCbwaBYtsYleOzL6uRczVjGIRz+JI0LiSYY6hP3T2gIkFLHFtahNvFBo0vCWHd63ot1aOVx57/wV3yUI5h4Uopj+eqGfjn0j/hyMGwL/pLYdGKpNeadIzNTlE5usPPOmILJHKjU1O7omUK7Ry1dQIlCH1S6wm9ycsNo8SxV1zHtbpklcmtRCFq/yI/qwuszp/7KVrzbBLOFdqEzn/Dm4YXddW7pox1SVI8SrBmI6/5x2vj5cyWWYSxFM0MsATEa7HqkPHpWils7mJw3+7UDjScyZ6WDInkWGm30sO0O9uUD3mFLHh/z9G/RYYoLKP5T0pca1ZcuSj/N19A7h6L5++ftPGwfFFF8Eg+utVaEsFpKoJA5u085DYq2my6nY5Bck0JbOUKJYpbgWVcuZrHLpnsa+tVJGWN4AFlu8LkqjFXEBMK7u7LjjFT2OoOs90KoAwRYVeJtErM0mm/NrNKrJtbexOLEUnhvNEin/RzJ4z4e7eApWhCc9/MW4D+XPCt6W0GwjDwKEC7s3Vff8O2PuScM1L0sFSP2WG7zyRnMnBc8SxHQQmOjS7JJjBHCXU97Pv7LUngAttQC1y7AJ8RzipcxNt7phfpXlrJ7B7P1cQpkdPNOCt6T1lJ8Cu+DI0KucWBsjAHsla2o6QaQ+D5smjxj+Godfls4BVLl8IvUYRx27KRwbur61Rb9O4uVi/wVbTSZbBs3nCdzGaYQM4/+PMhJl+PdPOlXO5JR5YqmT7+fRp+ELuYpPkV1Z0XxJvEG4yhj8CXLbMZo5AcuwDnvFCFDLncxmEaD1HBShHTfI5ZFRmR5FoKYJeRThdflCJWMW7KpK2T2OdsBQou9C9A6FQFe1hmApydMqr70yHpsGoO2FJ8l4Bz9ud57zmTTD+kLRvWEluvbu2nLEJzi++bVuD1ckuAqoP+yCb3VhzxM9p6NbG7kKu4MTUXeuSqnICpMuDuMq3PCXxSkG7XZB/30yKPLMfsSHkwBfNV23Uuo/3oUGGh37oLu7CStJnt78XjSzh1lu4+XrmYiGnKS+EEPbA36q9fCuHIwrf5/TSz7bPVv3xwZxTkmkhYu7Mh44odfvcJxXwTESZqfsH3GzYxKvD+FtcVqVLdjIN7fhl7HtlMvcQwxLbdI+rH7sRobsXRunT8Sgy9Uhl2Clym7mcc3AHSGCPOK0/qP4Zjy5dbJ1mD8dTztlX4u+pPuawS+iqKQgEDWA5yy7qx5sda2xWhdOxi2P2naiM71CqQqxXT2+SjJ/a6IWr8XUCCMzooZ6t1P+nOFa8KiVJ44HAu8P6n4EmWW6L6IWD1mzujRlD43UQm9182XA/eUxNbZo1IxF6gb1ly0NkDTr2PLBznisIhRYRyjZriiJSrOac5bWCJur9LfhfBetSwAhpX31kd7u+y96T/scp7QYvTUXUsTZnHkURqmr5r0ykbSv49D2yLfEumcC3dQu9MQsDnAxjKmp5+luSjhsjjzRzHOBqJ3ktfhrYnETNbMNH3zZ3hvJq+77f6quV50H+tBOzopJErOBiADZP0Nip7F9g9lBmyBF3ks9EqyUcaq+scmZ1H7sXuEpdh7DmMQfOPP57NpFu1Kih/JjCPa2Zn+xi8NNKRsg6rEHftLD8QTRx9I2tzOGgviAZBsO7hnh/DMWm/ZChwdpPfbV5vswqeIJuFTDV5uDJV3iR50OGgJ1KUC5lnIbZK1V4ddbXEGvO70KZUkAhtfh6mLe8IL/CM0xyUtP/sc3de6tPg2vzczg1mtGdvqfcxNiIVrLHF68As3/SKLv7PQJbm/rh9/Nq3MuT+BYHDaq5cSoFjVxpm2GVOhwmExsddXVTKMjFDIAsOpvFs8gFJDnWsBS/oFqrev68MQOV/90KevKzaMx2Z0UhLU6hYTtXnEh+WZHtQK3qmu64b7qQbNMOTDMps1jXLjwJSqPss8R40zGHPslXMrfeEDU2qg7LJAINi6rBqkCBu9+r6fsk4ygi07DVjSdlawr7UWERCjdLlQQbf0PW1YHWvCx0n8u8jR0LAzMTLC8DQFV0J14k5Ez6Nf0khM5tlwznXkQ+J3Tzf5re0ZjRk/2ELSEteiLX/O0mhN31g3sYleaPLsIzYFV4gakS4zjDY9epkgBTOJ49t3A4ndyUExLcw6uWYXVOjwkpxGMNkKlZGrhC+8om6/D+YVD5xZbn6C6K+1B4fBohtqWnM3z+Tltr1eCYEcpDA/p7j+1ScY8cStVZc/AgJaMfSxMcrgiOvuHp41GdfN4TBQsT5+cshqN/R0iZLogs61wvzXNoa8idrYmfU2hP5xwoS+y+GK5rVMKdMfVJ++K7SkeXEXHv2WrQxERHkHozKLUkBrzcz4bRjBOmYIUiIDsyfu/1VdBAb0r8wrt+ZNutTHpwAGCE5zrQrfAPUvVvYQ9tm/yM850SHEUgX0k2RnesJf4wrxJ4clfPtpXDV0ot0v++pqr9QRgygZ0mvZlec9k1dZQp6/5fbP9PU3Dou81DZPIPmrzD+Ylew2vvRJIclmR2o7UST4Xju1DrI3Ce0+SI+drsJYK+LZj2dVbvWZrtKaI/CfWkT0wOhAmu/ZfUQ+Fnp3YkI5DY52mmS9OLLmYHJt0S6KX1iFS852Mn7R85+5T1G1WAYYqQtI6Bf7qBKqATO46+HqMVywZK/McEZr7gcyTHVDe4rwLaag+kB89XfHY0VSioToBYCdl+dRx6YTLNl+pUEo5byhf/sWB4OBQ64WCS7i+uAqnidUpijO1Codoo0JHymEns0yx/eHnzk8OnfipRB28Pw1iKKDDLIo7sbAiQyQVovS6E71tGePfwbxp+2jahqGssAuW7g2Od+tq0m0E8SRbPiWaVAeA1K31/LQNtHTrzpO+VzZmBJ+n0iyUbGwYHdsSvAGmzg2TLJmJ//HWXgmukWHnMjKy/xNLGsr9rTsVpnqU5ULjdEpPMPaFW7gkExC+2Tytu523dyQ1lt3BdT5x3dBz+DpjFvfDCnCuZQw2VHyU52G3VSmWtlAylYYD9A30RFkl9tBWBJWgQSqiDd6USi3iN0hHrx/CG1SPXW5IRO2AwTGM77rwdD18oVbBunGwt8fcj/k0GsXTqI0PrU99diBepNaGt7rP0b0XhPd4wjc4i1JKLxpLaq1bPT0VHJDL/dPYVgN1X4PokjT4e5tQL2plyCpvH4LwzBxUm8G2Gc5WlnaP+eSV4DTaB4iwCBddYYjmB3HPzz3D5oJ4q4U0l/a3xhi966qKl9+WHwQDf0y6/UAo5kT6N+a2eG4s3y2vFMgbRALeJeETRPaJMa/H7uSQ45tcBcYhw8pdcegr/uuMiPKWt80/Pdd/r8ycitPwtr9d2SeneYxi18x9PM0XTeu4y9FAxGti/wkJeilvD/vnaVh6hMXZ7nPzUZK+hBVoeMnlifPUbYViQjS58N805bNFapPwBjyo2xa32+ckAOt8xsiEml3TmK84smtjK2O346BV02FC/Uq64QMD70oyDrJvbZ+r1mIF45YFGHnjWQrigV554E24SFpIgVPQSNFi+/I/q2t+WTh3D9BOCLA4hnKX6mYUnjHlo7d01FIGcYRlasD5CV/IsKSihzRA7cXFifb0Yz8RggeQ8pDRg3+lvKvKkkNsFtHqwkzg/lvxZHtXbiCPgc73ra6zb/VhybvRHJI3KuVx5ld8LmK+96MfRLmlxz/PZuOHSR28kG/27VXb4rAuhGK+ML8vwiahFgHpKr8ajRu81odZL/0rZfOh/h+Ma5r28eMBZ8MGvGa4RhQz4QiOfdtXRycofA8ldbXAP82bqhDuX762i1T3rhx/DzMnCHj1olPoWmyOWvAbo+v37hqs2gEZY8TPBIkDOqV6TbrEkuIvOr/OmaKrFBqQmdv/38hLkn7i30dhhK8laPlSPN6oD9jz5UngD8B83VS4a2+KczPGMDD/J4a+xor3Cax5lN3WVubzql+NprJ3H5vFTX81jGeTiFLT3DBmJm/RBPCuzDX+V1zzDLnwSFkFpsLKA6XGMo4RejV+wH5Br1/ICOACQStIGGXmvWLTa0f2F0FApakGbleSpNjeWz8Zc6xx2mwFnC40jSsRwlf8IucAlThZh8DzWLa95+APbgfJWTvBNboBpHrBuZikHydZAbZX3TB2suFG8BbOC6pEPC1qb/CGAXeUCLW8/38QqjLsZETA1dLyMHr5yzBHf3j2ZhZUs8tDn33IDipFEVTp48AeiINjMGqZHE3AelxV39NTiP+gtNEe82nWguIpGpXK+ZUsdJ2+B7w0B7GcdbG6L6MURtGiFgEDT5O+m4ke10ehtgIN76b7MUmgWXFQWX/1QuCQwPaz/qfgML8qMfyXkSi9jwyScGxj2TdDrRX1qfVec9dhAsMxPBbtxtYoc9IMmAbMei3t3yBdqC2GNpNcDGikkpHVZHTAND6tOiWtUYSK1PCJOTS7X1DOiGEyzoj53WjovxsVWBdwIKbYQ/nk+rqGzClby9AUjMF1CR72MvpDiYVkYtipGNIVpt++cpDVgQQ2e8KmvxdjD2byy1Q/LoONOgu1hJin5jgp7qNe+HuAcyM5eP3joxqk3GeFe6+eH/uS93HLx1L004/smap8aYL8y1ECFQwNjZzFDdmkMWGps4I7dmlUaDFqwptuLIG5ATnI1BtO512/1YjFp6/l/WCzZ4h+C5T4+8zGsYRGfMCDpdBFj91P7Zy3wJDwyIMFm3FtFiVHUlYD6vYMuYguF42tKIERSffsweDoy5JNj3R/+umdumfRqGGuoyVAgYDclCNg1kB3dbjjFq22+yPiCAXy1NcMWm/bHV4QFHjUfNImFABulSFULAbzjXoxg5lODz83LxMrEstgC/Q8Zg98uhzpWQzyfUIAqKdFdqw39a8LxDTc1U5V4sBczGdtbVfwvbYWYLriDXnxOA+vAh/ar3sr19WXgLNT8jLvaOm9QJS+ufAFU67tCaFAzPXQO7EzUk3SZWrx+WWNl9qUSrw6IU+Low9pPX7CokVDyjj9GznHRBScUDU8rqfemvKPmIzFjGZKj+gz4ngw3dB/67EoUc1O5Py8w5+CahCuzyks/u3BOYY5UfeHbR++jmIeXbJP+BeI0hOz6nu24mMM2MZdr6oGtV+EZZDIBaphlsM7eK3uV8TUPfDAswKqCAYZXMf+4U1Ip3eJp1RawQ9KI6XLFpkHkiJJROQkqm7O3AVgWbniaplmZTh9/XQgAgZTOE6Ck6raNdhhFUCgAHKGt/TO/zTCARV8q6d4Y6mLNB9ZAceiZhR7mHayNhkNWe+O1U9P/JChkgfZH887oTahhttMEl9V7T4QauCCaymBcQLR1Aj4Tp69PqjqDSG12xU44dXbq4awRGaVijUx7Exp6ZkXHQArTRKT0BKsLjC85V7TQV6kRULLdhYz2M/omKK7R3Oze9RFg2/oGggeVNx5LFSRgBHxDGlUznhPqxs9d6yOQTacOmVY0HukMovYAdy8bD2ySf5NH9sseDL0+EmkmJCiR32aU4xevUBWiRa5Aac229YFA91VSJPZt5SMqG2Edn1YzSQh6lZkMGUy0uljsmQsLT2hgvnZIYo3invjM1AE5Sq8ea4SoNkUkOoQGl99EAaJ5kDqvjSgEJ2x0oZsD/+DZl0Zl26gtW+kKMhpcjIAPj463iNMR56QUiFAq0y5kmTKkHjPjbWyLCAQLlc1pSQYHo5t8u1zKa8eixKhPH9zOYufmCp8+6fOxza8+tQI7eiEcjEutpIqTCaynszj89STbobgAVVwv82n7MvwoxEruw3QpFFRIQAE2PnDArhRrpAWmdLGL/b6HqEDs5lfKNnNCOnL/nHWV5yglXVCJRSYWHd5cp6mtz4orNyTrVBBhTxNXK6YOWF9HE+ZaBmVqtjs0bE0v0huC6fCvpWIbS/D5k86wqiHm66FuDthZJjZNkUNDoJWv68fpv54u1MHHHy7kq0vPUhZ2TktfgMzKehvTRBQ1saSd/kMvVDxWVf1VgGaQ1TId58ZEmP1HO0i/kjolveiExwJxvU/stBmIKoANBfmyc5efmo1fFU2Ox/cuRX7SByvRX46PVunbqHYkJVlFeFo1uGVpLSTtF13TxU/AZiops6nZdyAbP27TrTPN8aQGlH3ZWFIUE7GSS9MzEdx7N+HBdJB3EG/YhCpU6+fD6FsuC9VOX29R5sm55MAOKVjW+H5FaGHCwXbjxavVblpJLwTuG01cvKSSbQTRXkUuerlT0RVz56PqH17gVs/Ox4bl2ndCIkDFyMtjGRi3bcK3VTDKbn7LTVbfWD9bYqIxpIG7ZXq0Y+msmiI9/ncztsEI6gFnCsRSymkcW01CwBz68CVO9zEVraixzic3HM6rHRzjUvQWJInPxTKJwVpsnFGh7E/W9hwqQt9QBSkDj5EnO274Vwr2w49QoMS7QUREx3xzZB5TS2IU4PYvwe2jfsb3IEZnVQJ1v6A7klC8DhKLaROoQ9RVC30mWOtcmM9roVG3Rd3iRcJfniXvtibWGErIeq78HX26VDjKlnfputnQUdLEz37yfb5+xqWL9nCK0JmM4k/0lNGKoTrxtdBkm0BW5brs7UmZRqq7pRTQE0k4dvHFPs1hh0EE7etqNmD/Toc/dbkddkWiNg2sfSm3l0JI4RT2lcxU6qm7coWX/bEdA6WM6w1p2RW0qvlwocgWhrFlq7tiphyDZ2Kah1+6T4ijQaZCZ7uF50iHpMnQGTqgTWpB5YmNV0uMeKsFGIF6CRNwCY3rqwrJoYA3JbUYbxbMfBmRjb1u4V6ZFF/cIRSxJlBzX5YRT+uFYYAgSPJQTh0gmLun0erd/jgWMzybyAmpPeRfSDu7ldZtR7jot5pQ5fTXs77NdETdyyiNZEksBxAaFk0TXTeDhvx5qumuloGxT9JVeW+sH8ImE7l4hljrFRsU4PlAyEZp6MpJDuavyT9RKe66JJzdvsKRuEWmsxq6seLy4vk2v9irCNAUKd0tnrKO6gsTqQyMxlUgtHtOq6UBEvJT/IesTT/KNp2dnM1njGYiO2DRluASoOrzU9/X+lUENqGiICSKh16D2DJlN1XZw6VlvnKkwoOfSZCRKngkkIrtvcYh2tHr0KlEm/45JZ1i0stzcAOYI7DvLjGDpEMjYxNGgtC0GiNRBAuX2wbuGpg60ypBZL4+A9sSgoOLg/pmFQLZ+0b66Nv5nW4fcv0VgQ2kwTPmSULC4WMGDSZxj7IAIKbPOm/kKeRi4DrdnvcsTkiDIBWjGZ9TVxa4N/aNAzP6zVC5LKGLwNAoyR3iMCt3c0j1ungM+zDXRfhr26APtgFwpf7+xLcqKpKW3Jd+S4UfO/Jtebrj0c8q54xjmBhMW9rD4f0MiOwMiBNrso9IHgdSLWD99iNlksqcCeU5APudkqkQHXwG8H6JOJqEKaVICPS/5aA+biq/atmuVytN0zerY5Lal4LO30esWxsOcALvcZd6CntLkV1RO3h8P8gnE1JB++IoRbB43cOhmRAZuZIjbv2opWNoq1ZcbBn9JGk9sN9Nulxte1M079bj9MgraTgkSPFFeCTZh7gAI8dK5UPMA3SEBtjVizYVHm4Ucrns7GMBVKcbKBK6eEhVyVE2ZFtDjFJAx9yjCOncuwpatQzHI54kyyc0KYPosNQRtSaKhBefa3MRKz/+09MJTAHS2rL5+/IdcYxODjxtja6CL2krJJCdAcIPCSEsAyJnDIBQnEFqho7PyxaHzph9iuZNvM7hu2N9oM3eADJOTodue9TW3FR0gB+u0scqNb8sh+wrA0dMqOWcT3SDwF640z9qmiNAA3T/+in3C4LAkTmXqkJngHY4ZNF9okNZuQgD4NKowARdr0EyCt03cg2vW5LN88cQKb0ZjBXPNY63poiSr6N9Hvp8vKXJFVoluQMCNA4Fw1cI3KgVP+AjTjT5CjfAndJmH88sJ3SEFDkJ5l/MjnIG02eQj3lWgF5ZxFNbk4VI/W7adjaxUluY6Cp5LhzKxl+dFxQ0QfNJI7KfoBclFFIyY67v5aM5fLKuwd4IeUmhk0xtlfbzTjqknqNBGuc1sOUi4X4tC0t9ang/4bFRAMhKc5zryM2X072aqKDSytho4KUxgzGcDwTkbI7G1obGq2UnTtWO6uGT3jOFLvb9JqKEjuXKLUqTiR/pFyTelWlfRI89nddHoGQRQyzC+qQx3pHGj7Y8d43bMxylj2Q5eOGw2Kyhwcj7UdmJ5ZYhbhzkweHJcfWWBi7da2JlDgXM4bZLx2uoQebGp8XXRo5HtV6dDhmQyceOyGp5AISwtb7ihRcohiIJ978FiIeBfpc/Xvjx2JQmVhL6Qa8QMT6Q8Cfxa8pBVAsaDSXplFOGYE01rHettzihcPZOIE+R2PZ93g0Jhkh9Xi74LKpf9roaXMaRZU6sHWNrV67fGxmX9Vh2OPFlApqdYKlUChrH8zQnmDo3zTVprwxe1EAcnnBz9g8wHxp9taniz7HvMwvhUFqj4NDjFFPzexYD8J8rBwdo1qnlAKC5l3L/uYJLiAAhi2xGuM5hvxxoHLY8sQZzOpdPxM267aQPY4cWli0c4PGJeto9oS+63wIBojq0FxllfN+FFbbMajAkP10kMrfx9MpQHBvwKuqBSeU+ybmi0SOnRCTNR8VIjnhCysh68TNRakaSz7MMyQdS7pxQ/i0vlRlULXCWRGVt1J7C92R5YrIpHs1Kwlb3tI5SMz8MDejKMuFRvQQXz/DtCIM2/fUdmNCb1QV4jO6kwURggUpFCdxLGpWUL//bgS0WMpr9ILfkRtuNxN1IpOEwjnKk1FhNpKW4WjI6gO/qAB/3RyCBoM4dSGnSBcG0U4BSOcUQMbGB1jmM+lLqd0jKCjs6p5Iwih81/ZofmMYr4kMYdqi/oUUWrGFjQs57YHmhNDlQIQRH2fsJCeXpjxGR07d1bfuLLX7fZILMtbL6T1+hjHe5nJ3n3YSowSI9u5Vzvf+ZWWXsXa/kkQbiqcrjMI+XzwCTCAmkcYsOHA66pev1fsHk3iZZoy6cZuCUSouiRDHmktIibDAowsYDRP2sNpm/8pbQMlskTLGJ8J0ZG4IyLcGdfB3KYm+/YQOKggZNWjRl0MkR7yqICe7Ey9P5jJK5fETAhZvX9xnHLyC8ovipCa+bAhel5zHzfUVNUh7uBg8QVJUyM16IHoIH3iTXeRwXi151rTumXmDWKpjx/t4N5v4VJTEikl5f91ebAsl/9pwF3sgtJv4QO5Pyr6Rw45d648zkx8Zz3LbfWFzqum+9ZnPeo85uMWO2BifcsNU4mTZ1GKOl92mbcSJRYMDY8Tou13HbjluKKPQgq9soTzFOix280FqvhOLDhDIF858cztLG3Ki6o2aiaZ589GgtEyG0qtnlHSQP5ZR0km86dw9xUcjWlt+sbLer3E+Co5UQZD+tM8cGEloajHjVHtzaqjhX1RDPpJb9C+c5/JcZ40xgXZmCl3RqGE7dVmN/+xadhFTL9ohyL3SuWhC9hzQ0Dv2qc+UoEuwxyLikDr8j4KAtkMFYbmXUPEQWeTto+h1NkYLAysMvI+OwJ3JFBIVvNDsiGVXyX7U0UURad42ekto45tj6+3G+n1iCG8lwnKjya2BEYR4CpBsH2HC2eOMD+s9xLdw7frslr9D1jSxboCemyPfCzZ1trOwtb4sWxABeQ+jNAnx0yM+nIw32OWAvggyqVt2fQgL4PCMJC3/gW1Qs6pv9+rOpUUtLiqELDB4JL+jdPLtLF1kZUPqcsyNPcACtLV3KaEoxWbkhcGcGSrmZnjcudUqu8jJstAXarcKtlJUlphYE1HoZ8nlwRupfxHLhn2BUAR6d6wkz38CCPi9iiztTd71CLWAHMaRZBodZJiW933viynxnm4ucr5M5oIf5ZETitUeb+ms/6Cm28GpnC9lv223QEVEoEYOnwhCUZqv8bD0uF54RjOTGGQmYB+YGwiKpcwHccS1bVBteUTOJuLig0k043kdv7R81OkuYjnm894RoahDHN33SRL7EX7PIblQgHFRKKrgYM0XsD0r4oGKwtaCKdZcutvYNLw3mUjIZzZKslESG03+6kvWrqUg7SsElrFTOGBdfnl5bGrd8zu4ZGNuoixz6lFL7JQSmGH0189huVJvUDuMJjo+FcDZ9m89yhHhVac2VnyJO5Z0JrJWWL6MjLXjBQKrrYsi0SPKc6l6dM1ch7147UzusBVmzPr6KNJhLOnsb9tT2L/ldKNU47NDmxqtg8rhMMXExL2wCyWtLlfsJwAzioAVwvJKrBt+bMM0rLllUHLT3zcH8+GQeN2ygfiMD1fK7sAKEsTpRGjeiTwuDsv1srzGP0vVvxku3T/mcwRhe/ssSIHjAG2m7enlZ/nzjau7VI8Z50ACy53a17rr6/5ZdBKTGwxK4oFQN7OGepHhr8aRo/40DOY7BLIDk4aU4ivJ8i77Ov3m/MbSq+2srpO0uQNECnRjhlhk11EIxe/4rBJi1PvoglFwjnrOJrPZKNhmG64B0C0OwFaxzgfzcSns+/HVaSbbelNf1B4NN5bG2O6FJtLTp1P2qUKAl/2m5MBP/wLDEcdMnrLBGVjh0X/7DdDvqWKCTjMcgKBDJdhjJTio2PQrA0IZvf03CL45SvWwr7D/E+erf8IZwAzlf16mTACj/9/Du3afXyI40JIbWIVfOVVVV//wkROs2xEKjbp/YHCS2jUWfUBfJfSl/nngJEz2t/xfAQBCFbKpcIKWNXwvbISoLM3X1WtAntbmu6iIB/ms89wLBTcsbJBKWCZUkaElM6ii2q44SL3FTMn6JZDzsIGMIb8QKbnRKjojUCC5BtyRk+HP4+tJoVHZwdSDsVDVlfGh3H24DuH4O2ij6CDMlw1bIv1GzBdVI8i1w2Zl9H41HriHSUW2DeEr4Jyp1/bVie++eZJP7aOSCgSrkuamS9xQEGhg7UsI1BYDqQsxkCpDl00S3bnCl7u9CZkOcRrCpSUPuzYSMbiDdbN3AhFcr143pEkLRgu8gXf5YA7ST9Mv1IcD5ESYDdmf8ztL+CSm4pXBL145o3+pzJj8jlyOUpn9KkQ6tSpSQKCjWjNrAKFpxYKrMlb8xmrK6qTxEUDga6zKoScfLbJwqsjr7Pwf2qGyJwnZlVmSt42V1nGftrlb7TUS+VDGTIYC/mJZqu1zBcEK0lTS4yKFhDh3ht4Z4uyEyuapsj7cHkSJHb3FO3RBEgf0ZPPeOfiGt3bPrTBkEDOi+7YVyFHAfYq8uhUIaYYOahKsqEd/QGFmH2FnuvTV3/1K8yNFjFuFwlWjtLfzTw2dFK0nfKmGEdevmcLdus061DeSdqiHhcRYEZISg906G6fwBYqcgfeZ0SzPjS87/crVOlKTgtVu0xqBYA26M385gLsmZ5uLiWvixV8TiQMuPR9/KSvuFLaT6r84A3JaiuaoDpkjQqxULZ9+l6iVLMe2vuTz0lcbPkCWjZRt4PQz8n3j4m/6edgRL34FA5iMEoa/t6KzjIuiuf50jTYvgdGWHSlkfORm1Kl+cD3/huSCtuWupXlvY/poQhaqpmvSnZerCnUX2undKVjOgKw1VuSqaxPwL8xrpqV4dycwW0RofvxVt5amZogz18crgk8MvnDhQn289uLKL92mST3ZEvBtguvQwdWNn1lL8ZHCGAm/YX/ml+OA7poNIq9Sb3kHcBIPoW9Q2BQP/lxb5+qNK1u6phbib2+eBzgOCD+YEXQziG9qT6Z0ek7v27PjuOBT6uw9zzy</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="计划" scheme="http://a-kali.github.io/categories/%E8%AE%A1%E5%88%92/"/>
    
    
      <category term="Google" scheme="http://a-kali.github.io/tags/Google/"/>
    
      <category term="招聘" scheme="http://a-kali.github.io/tags/%E6%8B%9B%E8%81%98/"/>
    
      <category term="机器学习" scheme="http://a-kali.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="计划" scheme="http://a-kali.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>在深度学习过程中遇到的一些bug及解决方法</title>
    <link href="http://a-kali.github.io/2019/08/29/%E5%9C%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9Bbug%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://a-kali.github.io/2019/08/29/在深度学习过程中遇到的一些bug及解决方法/</id>
    <published>2019-08-29T09:15:55.000Z</published>
    <updated>2019-08-29T09:15:55.619Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《C++ Primer》 第4章 表达式</title>
    <link href="http://a-kali.github.io/2019/08/29/%E3%80%8AC-Primer%E3%80%8B-%E7%AC%AC4%E7%AB%A0-%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://a-kali.github.io/2019/08/29/《C-Primer》-第4章-表达式/</id>
    <published>2019-08-29T08:14:27.000Z</published>
    <updated>2019-08-29T08:54:15.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-8-位运算符"><a href="#4-8-位运算符" class="headerlink" title="4.8 位运算符"></a>4.8 位运算符</h1><p><strong>位运算符</strong>主要作用于整型的运算对象，并把运算对象看成是二进制位的集合。</p><ul><li>~ 位求反</li><li>&lt;&lt; 左移</li><li>&gt;&gt; 右移</li><li>&amp; 位与</li><li>^ 位异或</li><li>| 位或</li></ul><h1 id="4-9-sizeof-运算符"><a href="#4-9-sizeof-运算符" class="headerlink" title="4.9 sizeof 运算符"></a>4.9 sizeof 运算符</h1><p>​    <strong>sizeof</strong> 运算符返回的是表达式结果类型的大小，返回类型为 size_t。</p><p>就这样水完一篇博客（ -_-)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;4-8-位运算符&quot;&gt;&lt;a href=&quot;#4-8-位运算符&quot; class=&quot;headerlink&quot; title=&quot;4.8 位运算符&quot;&gt;&lt;/a&gt;4.8 位运算符&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;位运算符&lt;/strong&gt;主要作用于整型的运算对象，并把运算对象看成是二进制
      
    
    </summary>
    
      <category term="C++" scheme="http://a-kali.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://a-kali.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>《C++ Primer》 第3章 字符串、向量和数组</title>
    <link href="http://a-kali.github.io/2019/08/26/%E3%80%8AC-Primer%E3%80%8B-%E7%AC%AC3%E7%AB%A0-%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/"/>
    <id>http://a-kali.github.io/2019/08/26/《C-Primer》-第3章-字符串、向量和数组/</id>
    <published>2019-08-25T17:58:39.000Z</published>
    <updated>2019-08-29T03:37:23.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-1-命名空间的-using-声明"><a href="#3-1-命名空间的-using-声明" class="headerlink" title="3.1 命名空间的 using 声明"></a>3.1 命名空间的 using 声明</h1><p>​    <strong>域操作符</strong>（::）的含义是：编译器应从操作符左侧名字所示作用域中寻找右侧那个名字。因此，std::cin 的意思就是要使用命名空间 std 中的名字 cin。而使用 <strong>using 声明</strong>后则无需专门的前缀也能使用所需的名字了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br></pre></td></tr></table></figure><p>更方便的方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>这样就可以使用 std 命名空间中所有的名字了。</p><h1 id="3-2-标准库类型-string"><a href="#3-2-标准库类型-string" class="headerlink" title="3.2 标准库类型 string"></a>3.2 标准库类型 string</h1><p>​    标准库类型 <strong>string</strong> 表示可变长的字符序列，使用 string 类型必须首先包含 string 头文件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; // 包含 string 头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>; <span class="comment">// string 定义在命名空间 std 中</span></span><br></pre></td></tr></table></figure><h2 id="3-2-1-定义和初始化-string-对象"><a href="#3-2-1-定义和初始化-string-对象" class="headerlink" title="3.2.1 定义和初始化 string 对象"></a>3.2.1 定义和初始化 string 对象</h2><p>​    如何初始化类的对象是由类本身决定的。如下是初始化 string 对象的常用方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(s2)</span></span>;</span><br><span class="line"><span class="built_in">string</span> s1 = s2;    <span class="comment">// 同上</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(n, <span class="string">'c'</span>)</span>  <span class="comment">// 将s1初始化为由连续n个'c'组成的字符串</span></span></span><br></pre></td></tr></table></figure><h2 id="3-2-2-string-对象上的操作"><a href="#3-2-2-string-对象上的操作" class="headerlink" title="3.2.2 string 对象上的操作"></a>3.2.2 string 对象上的操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">os &lt;&lt; s; <span class="comment">// output stream</span></span><br><span class="line">is &gt;&gt; s; <span class="comment">// 输入到s，字符串以空白分隔</span></span><br><span class="line">getline(is, s); <span class="comment">// 从is中读取一行到s</span></span><br><span class="line">s.empty();</span><br><span class="line">s.size();</span><br><span class="line">s[n];</span><br><span class="line">s1 + s2;</span><br><span class="line">&lt;, &lt;=, &gt;, &gt;=  <span class="comment">// 利用字符在字典中的顺序进行比较，大小写敏感</span></span><br></pre></td></tr></table></figure><h3 id="读写-string-对象"><a href="#读写-string-对象" class="headerlink" title="读写 string 对象"></a>读写 string 对象</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; s; <span class="comment">// 将 string 对象读入 s，遇到空白停止</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;   <span class="comment">// 把第一个输入到s1中，第二个输入到s2中</span></span><br></pre></td></tr></table></figure><h2 id="3-2-3-处理-string-对象中的字符"><a href="#3-2-3-处理-string-对象中的字符" class="headerlink" title="3.2.3 处理 string 对象中的字符"></a>3.2.3 处理 string 对象中的字符</h2><p>​    <strong>cctype头文件</strong>中定义了一组标准库函数来处理 string 对象中的字符。比如判断字符是否为数字、字母、控制字符、可打印字符、大写、小写、标点等，以及大小写转换。（p82）</p><h3 id="基于范围的-for-语句"><a href="#基于范围的-for-语句" class="headerlink" title="基于范围的 for 语句"></a>基于范围的 for 语句</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (declaration: expression)  <span class="comment">// 跟python中 for declaration in expresson 类似</span></span><br><span class="line">    statement</span><br><span class="line"><span class="comment">// 举例    </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> c : str)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="使用范围-for-语句改变字符串中的字符"><a href="#使用范围-for-语句改变字符串中的字符" class="headerlink" title="使用范围 for 语句改变字符串中的字符"></a>使用范围 for 语句改变字符串中的字符</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : str)  <span class="comment">// c是一个引用，故赋值语句将改变s中字符的值</span></span><br><span class="line">    c = <span class="built_in">toupper</span>(c);</span><br></pre></td></tr></table></figure><h1 id="3-3-标准库类型-vector"><a href="#3-3-标准库类型-vector" class="headerlink" title="3.3 标准库类型 vector"></a>3.3 标准库类型 vector</h1><p>​    标准库类型 <strong>vector</strong> 表示对象的集合，其中所有对象的类型都相同。集合中每个对象都有一个与之对应的索引，索引用于访问对象。因为 vectot 容纳着其他对象，所以它也常被称作<strong>容器</strong>。</p><p>​    使用 vector：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ivec;  <span class="comment">// 定义一个能容纳int类型集合的对象</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Sales_item&gt; Sales_vec;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; file;</span><br></pre></td></tr></table></figure><p>vector 能容纳绝大多数类型的对象作为其元素。</p><h2 id="3-3-1-定义和初始化-vector-对象"><a href="#3-3-1-定义和初始化-vector-对象" class="headerlink" title="3.3.1 定义和初始化 vector 对象"></a>3.3.1 定义和初始化 vector 对象</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;T&gt; v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v2(v1);</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v3 = v1;</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v4(n, val);</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v5(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v6&#123;a,b,c...&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; v7 = &#123;a,b,c...&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-3-2-向-vector-对象中添加元素"><a href="#3-3-2-向-vector-对象中添加元素" class="headerlink" title="3.3.2 向 vector 对象中添加元素"></a>3.3.2 向 vector 对象中添加元素</h2><p>​    vector 的成员函数 <strong>push_back()</strong> 能将一个元素添加到 vector 的尾端。</p><h2 id="3-3-3-其他-vector-操作"><a href="#3-3-3-其他-vector-操作" class="headerlink" title="3.3.3 其他 vector 操作"></a>3.3.3 其他 vector 操作</h2><p>​    跟 string 差不多。</p><h1 id="3-4-迭代器介绍"><a href="#3-4-迭代器介绍" class="headerlink" title="3.4 迭代器介绍"></a>3.4 迭代器介绍</h1><p>​    <strong>迭代器</strong>能用于访问 string 对象和 vector 对象的元素，并且所有的标准库容器都能使用迭代器。使用迭代器能访问某个元素，迭代器也能从一个元素移动到另外一个元素。</p><h2 id="3-4-1-使用迭代器"><a href="#3-4-1-使用迭代器" class="headerlink" title="3.4.1 使用迭代器"></a>3.4.1 使用迭代器</h2><p>​    能使用迭代器的类型都拥有能返回迭代器的成员函数，比如 <strong>begin</strong> 和 <strong>end</strong>。其中 begin 成员负责指向第一个元素，end 成员则负责指向容器（或 string 对象）的”尾元素的下一个位置“的迭代器。end 成员返回的迭代器常被称为<strong>尾后迭代器</strong>。如果容器为空，则 begin 和 end 返回的是同一个元素。</p><h3 id="迭代器运算符"><a href="#迭代器运算符" class="headerlink" title="迭代器运算符"></a>迭代器运算符</h3><ul><li>*iter              返回迭代器iter所指元素的引用</li><li>iter-&gt;men  相当于(*iter).men</li><li>++iter           令 iter 指向容器下一个元素，同理有 –iter，iter + n，iter1 - iter2 等</li><li>iter1 &gt; iter2 比较位置关系，靠后的值大</li></ul><h3 id="迭代器类型"><a href="#迭代器类型" class="headerlink" title="迭代器类型"></a>迭代器类型</h3><p> 拥有迭代器迭代器的标准库类型使用 iterator 和 const_iterator 来表示迭代器的类型。<strong>const_iterator</strong> 和常量指针差不多，能读但不能修改所指元素的值，而 <strong>iterator</strong> 所指的对象可读可写。 如果容器对象是一个常量，则只能使用 const_iterator；否则两种类型都能使用。</p><h3 id="容器操作使迭代器失效"><a href="#容器操作使迭代器失效" class="headerlink" title="容器操作使迭代器失效"></a>容器操作使迭代器失效</h3><p>​    谨记，但凡是使用了迭代器的循环体，都不要向迭代器所属的容器添加元素。</p><h1 id="3-5-数组"><a href="#3-5-数组" class="headerlink" title="3.5 数组"></a>3.5 数组</h1><p>​    <strong>数组</strong> 是一种类似标准库类型 vector 的数据结构，与 vector 不同的是数组大小固定，不能随意向数组中增加元素。</p><h2 id="3-5-1-定义和初始化内置数组"><a href="#3-5-1-定义和初始化内置数组" class="headerlink" title="3.5.1 定义和初始化内置数组"></a>3.5.1 定义和初始化内置数组</h2><h3 id="显式初始化数组元素"><a href="#显式初始化数组元素" class="headerlink" title="显式初始化数组元素"></a>显式初始化数组元素</h3><p>​    如果声明时没有指明维度，编译器会根据初始值的数量计算并推断出来；如果指明了维度，那么初始值的总数量不应该超出指定的大小。</p><h3 id="字符数组的特殊性"><a href="#字符数组的特殊性" class="headerlink" title="字符数组的特殊性"></a>字符数组的特殊性</h3><p>​    当使用字符串字面值初始化字符数组时，一定要注意字符串字面值的结尾处还有一个隐藏的空字符，这个空字符也会像字符串的其它字符一样被拷贝到数组里去。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a1[<span class="number">3</span>] = &#123;<span class="string">'c'</span>, <span class="string">'p'</span>, <span class="string">'p'</span>&#125;;  <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">char</span> a2[<span class="number">4</span>] = <span class="string">"cpp"</span>;            <span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">char</span> a3[<span class="number">3</span>] = <span class="string">"cpp"</span>;            <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h3 id="理解复杂的数组声明"><a href="#理解复杂的数组声明" class="headerlink" title="理解复杂的数组声明"></a>理解复杂的数组声明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *ptrs[<span class="number">10</span>];                  <span class="comment">// ptrs是含有10个整型指针的数组</span></span><br><span class="line"><span class="keyword">int</span> &amp;refs[<span class="number">10</span>] = <span class="comment">/*?*/</span>;          <span class="comment">// 错误：不存在引用的数组</span></span><br><span class="line"><span class="keyword">int</span> (*Parray)[<span class="number">10</span>];              <span class="comment">// Parray指向一个整型数组</span></span><br><span class="line"><span class="keyword">int</span> (&amp;arrRef)[<span class="number">10</span>];              <span class="comment">// arrRef引用一个整型数组</span></span><br></pre></td></tr></table></figure><h2 id="3-5-3-指针和数组"><a href="#3-5-3-指针和数组" class="headerlink" title="3.5.3 指针和数组"></a>3.5.3 指针和数组</h2><p>​    数组类型的对象其实是一个指向该数组首元素的指针。该指针也是一个迭代器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;3-1-命名空间的-using-声明&quot;&gt;&lt;a href=&quot;#3-1-命名空间的-using-声明&quot; class=&quot;headerlink&quot; title=&quot;3.1 命名空间的 using 声明&quot;&gt;&lt;/a&gt;3.1 命名空间的 using 声明&lt;/h1&gt;&lt;p&gt;​    &lt;
      
    
    </summary>
    
      <category term="C++" scheme="http://a-kali.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://a-kali.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Kaggle 比赛记录之 SIIM-ACR Pneumothorax Segmentation</title>
    <link href="http://a-kali.github.io/2019/08/21/SIIM%E6%AF%94%E8%B5%9B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%9B%B2%E5%8C%BA/"/>
    <id>http://a-kali.github.io/2019/08/21/SIIM比赛中遇到的知识盲区/</id>
    <published>2019-08-21T14:23:24.000Z</published>
    <updated>2019-09-12T12:35:10.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记事"><a href="#记事" class="headerlink" title="记事"></a>记事</h1><p>​    随着 <a href="https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation" target="_blank" rel="noopener">Kaggle: SIIM-ACR Pneumothorax Segmentation</a> 接近尾声，我感觉有必要写一篇 blog 来记录一下这两个月的比赛经历，顺便总结一下经验。</p><p>​    刚开始的时候想着这不过是一场普通CV类的比赛而已，肝一肝就能上金牌。但现实狠狠地打了我的脸。最初三天看了看比赛规则，了解了下RLE等语义分割的基本概念，看了看各路大佬的EDA，算是入了个小门。随后就一直沉沦在MMDetection和COCO格式的配置中，由于网上资料太少太旧，导致我花了整整15天才把程序跑通orz，还是在各路大神的帮助下。详情可参考另一篇博客：<a href="https://a-kali.github.io/2019/08/04/%E4%BD%BF%E7%94%A8MMDetection%E8%BF%9B%E8%A1%8C%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/#more">使用MMDetection进行语义分割</a>。最后出的结果也非常地不尽人意，分数才 0.6+，而把所有预测结果全填上 -1 都有 0.78 分，着实难搞&#x1F611;。</p><p>​    中间一个月基本在走亲访友旅游摸鱼，直到八月中旬回学校，才重回赛场，放弃了MMDetection，找了个比较高分的<a href="https://www.kaggle.com/rishabhiitbhu/unet-with-resnet34-encoder-pytorch" target="_blank" rel="noopener">PyTorch baseline</a>，开始调参，也算是为这场比赛正式拉开了序幕（虽然只剩半个月了）。</p><p>Baseline细节：</p><ul><li>网络模型：UNet + ResNet34，使用imagenet进行预训练</li><li>输入图片尺寸：512 * 512 （为了更加贴近模型预训练时使用的图片尺寸）</li><li>训练集：验证集 = 4：1，使用 sklearn 中的 StratifiedKFold 进行五折划分</li><li>在验证集和训练集中，正负样本数量1：1</li><li>学习率策略：ReduceLROnPlateau</li><li>Loss：Focal Loss &amp; Dice Loss</li><li>优化器：Adam</li><li>最优模型选择：根据Loss的值进行选择，loss越小模型越优</li><li>生成结果时，单个分割区域的最少像素数：min_size == 3500</li><li>输出：1024*1024 的概率矩阵（因为原数据图像大小是 1024*1024），每个元素对应像素点属于 mask 的概率。最后用一个 sigmoid 函数生成 mask</li></ul><p>虽然是个分数挺高的 baseline，但还是有一些瑕疵：</p><ul><li>某行代码的 ‘!=’ 写成了 ‘==’</li><li>Trainer 类里的部分属性与下面传入函数的参数不是同一个变量，导致改了属性后传入的参数依然没改</li><li>验证时没有加 with torch.no_grad() 导致显存溢出</li><li>对数据去重的时候把单图多分割区域给删成了单图单分割区域</li></ul><p>改完上述问题后单 resnet34 分数能上 0.84+。</p><p>​    改完 bug 后第一步，把模型换成 SENet154 &#x1F60F;，单折 0.855 左右，好像海星的亚子。</p><p>​    随后又测了 SE_ReNeXt101、EfficientUNet_B5、DPN131、DenseNet201、DenseNet121等模型，但只有 EfficientUNet_B5 能跟 SENet154 不相上下，而其他模型基本跟 ResNet34 差不多。</p><p>​    对 SENet154 进行五折交叉验证，分数提高到 0.863。</p><p>​    对 EfficientUNet_B5、ResNet34、SENet154 三模型进行等比例融合、min_size == 3000，分数提高到 0.869。同时 EfficientUNet_B5、SENet154 双模型 、min_size == 2800，分数提高到 0.868。</p><p>​    使用 EfficientNet 单独进行二分类，将二分类中的负样本对应的预测样本替换成负样本，结果不理想，大概多模型融合后的分类能力已经很强了。</p><p>​    对 EfficientUNet_B5、ResNet34、SENet154、SE_ReNeXt101 四模型按 3:2:3:2 的比例进行融合，min_size == 3000，分数提高到 0.8694。</p><p>​    与此同时的另一边使用了 chexnet 进行二分类，将二分类的正样本对应的三模型预测样本的min_size降低到2500，负样本保持3000，将三模型的分数也提升到了 0.8694 。在 public leaderboard 排行60名，位于银牌区。</p><p>​    可是离金牌还有 0.01 分的差距，光是这样调参怕是很难上金牌&#x1F62A;  —— 2019.8.28</p><p>​    比赛进入第二阶段，更换了测试集。以新测试集的 1% 数据的成绩作为公榜成绩，剩下 99% 作为最终成绩。—— 2019.8.31</p><h1 id="盲区"><a href="#盲区" class="headerlink" title="盲区"></a>盲区</h1><p>FocalLoss和diceLoss的实现细节和应用场景</p><p>Unet、Unet++、FastRCNN、MaskRCNN、FPN、DCN、Cascade、SENet、efficientNet的技术细节</p><p>学习率的相关优化算法及应用场景，如ReduceLROnPlateau、warm up</p><p>threshold的调整策略</p><p>PyTorch实战经验不足，baseline的自主编写</p><p>新兴模型复现</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul><li><p>Q：为什么将训练集中的正负样本划为1：1能提高分数？</p><p>A：能避免模型分类时倾向某一方，减少在分类时出现的错误。</p></li><li><p>Q：代码中最佳模型的评判标准为什么不是iOU而是loss？</p><p>A：因为比赛分数的评判标准是Dice Loss</p></li><li><p>Q：每次五折验证的选择是否相同？</p><p>A：是。StratifiedKFold在随机种子不变的情况下，每次五折交叉验证选择的样本都是相同的。</p></li></ul><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>下次比赛一定要记录每个模型提交的参数、文件和分数啊啊啊啊，不然最后多模型融合的时候不知道如何分配权重</p><p>通过对比两份分数的高低和csv的差别，是否能确定哪些预测是对的（好像有点场外）</p><p>下次比赛要从头跟到尾，这样能尝试到更多的tips和参数</p><h1 id="高分-Solution"><a href="#高分-Solution" class="headerlink" title="高分 Solution"></a>高分 Solution</h1><h2 id="1st-place-solution"><a href="#1st-place-solution" class="headerlink" title="1st place solution"></a><a href="https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation/discussion/107824" target="_blank" rel="noopener">1st place solution</a></h2><h2 id="2rd-place-solution"><a href="#2rd-place-solution" class="headerlink" title="2rd place solution"></a><a href="https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation/discussion/108009#latest-622580" target="_blank" rel="noopener">2rd place solution</a></h2><h2 id="3rd-place-solution"><a href="#3rd-place-solution" class="headerlink" title="3rd place solution"></a><a href="https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation/discussion/108009#latest-622580" target="_blank" rel="noopener">3rd place solution</a></h2><h2 id="4th-place-solution"><a href="#4th-place-solution" class="headerlink" title="4th place solution"></a><a href="https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation/discussion/108397#latest-624615" target="_blank" rel="noopener">4th place solution</a></h2><h2 id="5th-place-solution"><a href="#5th-place-solution" class="headerlink" title="5th place solution"></a><a href="https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation/discussion/107603#latest-620358" target="_blank" rel="noopener">5th place solution</a></h2><ul><li>基于半监督学习，在网络添加了二分类器。</li><li>网络模型：带有 ASPP 结构的 UNet（ASPP 为 DeepLabV3+中的一种结构）</li><li>Backbone：se50 &amp; se101</li><li>图片尺寸：1024*1024</li><li>优化器：Adam</li><li>损失函数：1024 * BCE(results, masks) + BCE(cls, cls_target)</li><li>半监督学习：mean-teacher[1-2] with NIH Dataset </li></ul><p>mean-teacher 参考资料：</p><p>[1] <a href="https://github.com/CuriousAI/mean-teacher" target="_blank" rel="noopener">https://github.com/CuriousAI/mean-teacher</a><br>[2] <a href="https://arxiv.org/pdf/1703.01780.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1703.01780.pdf</a></p><h2 id="6th-place-solution"><a href="#6th-place-solution" class="headerlink" title="6th place solution"></a><a href="https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation/discussion/107743#latest-620263" target="_blank" rel="noopener">6th place solution</a></h2><ul><li>网络模型<ul><li>EncodingNet (ResNets, 512 and 1024 size)</li><li>UNet (EfficientNet4, se-resnext50, SENet154 with 512, 640 and 1024 sizes)</li></ul></li><li>数据增强：Crops 和 Rotations 类型的增强</li><li>损失函数：BCE + Dice （表示FocalLoss不太好用）</li><li>比起原始尺寸的图像，小尺寸图像会少很多分</li><li>Tricks：<ul><li>在 EncodingNet 使用了 11 种 TTA</li><li>删除了预测结果种面积小的mask</li></ul></li></ul><h2 id="8th-place-solution"><a href="#8th-place-solution" class="headerlink" title="8th place solution"></a><a href="https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation/discussion/107522#latest-619268" target="_blank" rel="noopener">8th place solution</a></h2><ul><li>数据分割：10%分出来用于融合(ensemble)，在剩下90%的数据里进行十折交叉验证</li><li>模型架构：DeepLabV3</li><li>Backbone：使用了组归一化的ResNet50/101 和 ResNeXt50/101</li><li>损失函数：BCE（在所有图像上训练）或者 Dice（只在正样本上训练）</li><li>优化器：Vanilla SGD, momentum 0.9</li><li>训练：<ul><li>batch size 4, 1024 x 1024</li><li>batch size 1, 1280 x 1280</li></ul></li><li>学习率策略：余弦退火，LR 0.01-0.0001</li><li>模型融合：<ul><li>4 个模型使用 Dice 损失函数，在正样本上训练</li><li>8 个模型使用 BCE 损失函数，在所有样本上训练。其中四个作为分类器使用</li><li>Max pixel value was taken as classification score, averaged across 4 models</li><li>Multiplied pixel-level scores from 4 models trained on positives only by this classification score, then averaged</li><li>Final ensemble: multiplied score as above averaged with pixel-level scores based on other 4/8 models trained on all images</li></ul></li><li>TTA：Hflip</li><li>后处理：删除了大小小于2048像素的mask（stage2），stage1中为4096像素</li></ul><p>没起到效果的工作：</p><ul><li>使用了Unet, LinkNet, PSPNet, EncNet, HRNet等架构，但效果没有DeepLab好</li><li>SGD 的效果比 Adam, Adabound 优化器的效果更好</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;记事&quot;&gt;&lt;a href=&quot;#记事&quot; class=&quot;headerlink&quot; title=&quot;记事&quot;&gt;&lt;/a&gt;记事&lt;/h1&gt;&lt;p&gt;​    随着 &lt;a href=&quot;https://www.kaggle.com/c/siim-acr-pneumothorax-segmen
      
    
    </summary>
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="计算机视觉" scheme="http://a-kali.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
      <category term="语义分割" scheme="http://a-kali.github.io/tags/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/"/>
    
      <category term="Kaggle" scheme="http://a-kali.github.io/tags/Kaggle/"/>
    
      <category term="PyTorch" scheme="http://a-kali.github.io/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>《C++ Primer》 第2章 变量和基本类型</title>
    <link href="http://a-kali.github.io/2019/08/20/%E3%80%8AC-Primer%E3%80%8B-%E7%AC%AC2%E7%AB%A0-%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    <id>http://a-kali.github.io/2019/08/20/《C-Primer》-第2章-变量和基本类型/</id>
    <published>2019-08-20T12:41:12.000Z</published>
    <updated>2019-08-27T15:50:13.718Z</updated>
    
    <content type="html"><![CDATA[<p>数据类型决定了程序中数据和操作的意义。</p><h1 id="2-1-基本内置类型"><a href="#2-1-基本内置类型" class="headerlink" title="2.1 基本内置类型"></a>2.1 基本内置类型</h1><h2 id="2-1-1-算术类型"><a href="#2-1-1-算术类型" class="headerlink" title="2.1.1 算术类型"></a>2.1.1 算术类型</h2><p>​    算术类型分为两类：<strong>整型</strong>（包括字符和布尔型在内）和<strong>浮点型</strong>。</p><h3 id="带符号类型和无符号类型"><a href="#带符号类型和无符号类型" class="headerlink" title="带符号类型和无符号类型"></a>带符号类型和无符号类型</h3><p>​    除去布尔型和扩展的字符型之外，其他整形可以划分为<strong>带符号的</strong>（signed）和<strong>无符号的</strong>（unsigned）。带符号类型可以表示正数、负数或0，而无符号类型则仅能表示大于等于0的值。</p><p>​    类型 int、short、long 和 long long 都是带符号的，通过在这些类型名前添加<strong>unsigned</strong> 就可以得到无符号类型。其中 unsigned int 可以缩写为 unsigned。</p><p>​    与其他整型不同，<strong>字符型</strong>被分为了三种：char、signed char 和 unsigned char。但字符型的表现形式只有两种：带符号型和无符号型，char 的实际表现为哪种又编译器决定。</p><p>​    无符号类型中所有的比特都用来存储值。</p><h2 id="2-1-2-类型转换"><a href="#2-1-2-类型转换" class="headerlink" title="2.1.2 类型转换"></a>2.1.2 类型转换</h2><p>类型所能表示的值的范围决定了转换的过程：</p><ul><li>非布尔 → 布尔：除 0 以外均为 true。</li><li>布尔 → 非布尔：false → 0，true → 1。</li><li>浮点数 → 整数：保留小数点前的部分。</li><li>给无符号数赋值超范围：结果为取模后的余数。</li></ul><h3 id="含有无符号类型的表达式"><a href="#含有无符号类型的表达式" class="headerlink" title="含有无符号类型的表达式"></a>含有无符号类型的表达式</h3><p>​    当一个表达式中既有无符号数又有 int 值时，那个 int 值就会转换成无符号数。若 int 值为负数，则相当于将负数赋值给一个无符号数并运算，会产生意料之外的结果。</p><h2 id="2-1-3-字面值常量"><a href="#2-1-3-字面值常量" class="headerlink" title="2.1.3 字面值常量"></a>2.1.3 字面值常量</h2><p>​    每个字面值常量都对应着一种数据类型，字面值常量的形式和值决定了它的数据类型。</p><h3 id="整型和浮点型字面值"><a href="#整型和浮点型字面值" class="headerlink" title="整型和浮点型字面值"></a>整型和浮点型字面值</h3><p>​    我们可以将<strong>整型字面值</strong>写作十进制数、八进制数和十六进制数的形式。以 0 开头的整数代表八进制数，以 0x 或0X 开头的代表十六进制数。</p><p>​    整型字面值具体的数据类型由它的值和符号决定。默认情况下，十进制字面值的类型是能容纳当前值的最小带符号数类型，而八进制和十六进制字面值既可能是带符号的也可能是无符号的。</p><p>​    <strong>浮点型字面值</strong>表现为一个小数或以科学记数法表示的指数，默认类型为double。</p><h3 id="字符和字符串字面值"><a href="#字符和字符串字面值" class="headerlink" title="字符和字符串字面值"></a>字符和字符串字面值</h3><p>​    由单引号括起来的一个字符称为<strong>字符型字面值</strong>，双引号括起来的零个或多个字符则构成<strong>字符串型字面值</strong>。</p><p>​    字符串字面值的类型实际上是由常量字符构成的数组，编译器在每个字符串的结尾添加一个空字符（’\0’），因此字面值实际长度比它的内容多 1。</p><h3 id="布尔字面值和指针字面值"><a href="#布尔字面值和指针字面值" class="headerlink" title="布尔字面值和指针字面值"></a>布尔字面值和指针字面值</h3><p>​    true 和 false 是<strong>布尔类型的字面值</strong>。</p><h1 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h1><p>​    <strong>变量</strong>提供一个具名的、可供程序操作的存储空间。C++ 中每个变量都有其数据类型，数据类型决定变量所占内存空间的大小和布局方式等。对 C++ 程序员来说，“变量”和“对象”一般可以互换使用。</p><h2 id="2-2-1-变量定义"><a href="#2-2-1-变量定义" class="headerlink" title="2.2.1 变量定义"></a>2.2.1 变量定义</h2><h3 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h3><p>​    当对象在创建时获得了一个特定的值，我们说这个对象被<strong>初始化</strong>了。初始化不等同于赋值，赋值的含义是把对象的当前值擦除，以一个新的值替代。</p><h3 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h3><p>初始化问题复杂性，e.g. 定义一个名为 sold 的 int 变量并初始化为 0，以下代码均可实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sold = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sold = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> sold&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sold</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>用花括号来初始化变量的形式被称为<strong>列表初始化</strong>。</p><h2 id="2-2-2-变量声明和定义的关系"><a href="#2-2-2-变量声明和定义的关系" class="headerlink" title="2.2.2 变量声明和定义的关系"></a>2.2.2 变量声明和定义的关系</h2><p>​    为了允许把程序拆分成多个逻辑部分来编写，C++语言支持<strong>分离式编译</strong>机制，该机制允许将程序分割为若干个文件，每个文件可被独立编译。</p><p>​    为了支持分离式编译，C++将声明和定义区分开来。<strong>声明</strong>使得名字为程序所知，<font color="red">一个文件如果想使用别处定义的名字则必须包含对那个名字的声明</font>。而<strong>定义</strong>负责创建与名字关联的实体。声明和定义都规定了变量的类型和名字，而并以还包括了申请空间，也可能会为变量赋予初始值。</p><p>​    如果想声明一个变量而非定义，就在变量名前添加<strong>关键字extern</strong>，而且不要显示地初始化变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i; <span class="comment">// 声明i而非定义i</span></span><br><span class="line"><span class="keyword">int</span> j;        <span class="comment">// 声明并定义j</span></span><br></pre></td></tr></table></figure><p>​    变量只能被定义一次，但可以被多次声明。如果要在多个文件中使用同一个变量，就必须将声明和定义分离。此时变量的定义必须且只能出现在一个文件中，而其他用到该变量的文件必须且只能对其声明。</p><h1 id="2-3-复合类型"><a href="#2-3-复合类型" class="headerlink" title="2.3 复合类型"></a>2.3 复合类型</h1><p>​    <strong>复合类型</strong>是指基于其他类型定义的类型，其中两种为引用和指针。</p><h2 id="2-3-1-引用"><a href="#2-3-1-引用" class="headerlink" title="2.3.1 引用"></a>2.3.1 引用</h2><p>​    <strong>引用</strong>为对象起了另一个名字，引用类型引用另外一种类型。通过将声明符写成&amp;d的形式来定义引用类型，其中d是声明时的变量名：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ival = <span class="number">1024</span>;     <span class="comment">// 声明了变量名为ival</span></span><br><span class="line"><span class="keyword">int</span> &amp;refVal = ival;  <span class="comment">// 此时refVal成了该变量的第二个名字</span></span><br></pre></td></tr></table></figure><h2 id="2-3-2-指针"><a href="#2-3-2-指针" class="headerlink" title="2.3.2 指针"></a>2.3.2 指针</h2><p>​    <strong>指针</strong>时“指向”另外一种类型的复合类型。定义指针类型的方法将声明符写成 *d 的形式，其中 d 是变量名。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ip1, *ip2; <span class="comment">//ip1是int型对象，ip2是指向一个int型对象的指针</span></span><br></pre></td></tr></table></figure><h3 id="获取对象的地址"><a href="#获取对象的地址" class="headerlink" title="获取对象的地址"></a>获取对象的地址</h3><p>​    指针存放某个对象的地址，要想获取该地址，需要使用<strong>取地址符（&amp;）</strong>。</p><h3 id="利用指针访问对象"><a href="#利用指针访问对象" class="headerlink" title="利用指针访问对象"></a>利用指针访问对象</h3><p>​    如果指针指向了一个对象，则允许使用<strong>解引用符（*）</strong>来访问该对象。</p><hr><p>Note：引用声明符&amp;、指针声明符*、取地址操作符&amp;、解引用符* 所代表的含义各不相同。</p><hr><h3 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h3><p>​    <strong>空指针</strong>不指向任何对象，在试图使用一个空指针之前代码可以首先检查它是否为空。以下是三种等价的生成空指针的方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p1 = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> *p2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> *p3 = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="void-指针"><a href="#void-指针" class="headerlink" title="void* 指针"></a>void* 指针</h3><p>​    <strong>void*</strong>指针可用于存放任意对象的地址。但由于我们并不知道这个对象到底是什么类型，也就无法确定能在这个对象上做哪些操作，故不能直接操作void*指针所指的对象。</p><h2 id="2-3-3-理解复合类型的声明"><a href="#2-3-3-理解复合类型的声明" class="headerlink" title="2.3.3 理解复合类型的声明"></a>2.3.3 理解复合类型的声明</h2><p>​    类型修饰符仅仅只是在声明时修饰了变量，并不能作为类型的一部分，且对与该声明语句中的其他变量不产生任何作用。</p><p>​    声明语句中的修饰符没有个数限制。</p><h1 id="2-4-const-限定符"><a href="#2-4-const-限定符" class="headerlink" title="2.4 const 限定符"></a>2.4 const 限定符</h1><p>​    关键字<strong>const</strong>可以对变量的类型加以限定，使得被限定的变量的值在定义之后不能再改变。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span></span><br></pre></td></tr></table></figure><p>因为const对象一旦创建后其值就不能再改变，所以const对象必须被初始化。</p><h3 id="对const的引用可能引用一个并非const的对象"><a href="#对const的引用可能引用一个并非const的对象" class="headerlink" title="对const的引用可能引用一个并非const的对象"></a>对const的引用可能引用一个并非const的对象</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">int</span> &amp;r1 = i;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r2 = i;</span><br><span class="line">r1 = <span class="number">0</span>;  <span class="comment">// 可以通过r1修改i的值</span></span><br><span class="line">r2 = <span class="number">0</span>;  <span class="comment">// 错误；不能通过r2修改i的值</span></span><br></pre></td></tr></table></figure><h2 id="2-4-3-顶层const"><a href="#2-4-3-顶层const" class="headerlink" title="2.4.3 顶层const"></a>2.4.3 顶层const</h2><p>​    用名词<strong>顶层const</strong>表示指针本身是个常量，而<strong>底层const</strong>表示指针所指的对象是一个常量。当执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层const资格，或者两个对象的数据类型必须能够转换。（待考究，p58）</p><h2 id="2-4-4-constexpr-和常量表达式"><a href="#2-4-4-constexpr-和常量表达式" class="headerlink" title="2.4.4 constexpr 和常量表达式"></a>2.4.4 constexpr 和常量表达式</h2><p>​    <strong>常量表达式</strong>是指值不会改变并且在编译过程就能得到计算结果的表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_files = <span class="number">20</span>; <span class="comment">// 常量表达式</span></span><br><span class="line"><span class="keyword">int</span> staff_size = <span class="number">28</span>; <span class="comment">// 不是常量表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sz = get_size(); <span class="comment">// 不是常量表达式，因为要在运行时才能获取到</span></span><br></pre></td></tr></table></figure><h3 id="constexpr-变量"><a href="#constexpr-变量" class="headerlink" title="constexpr 变量"></a>constexpr 变量</h3><p>​    C++11 新标准规定，允许将变量声明为<strong>constexpr</strong>类型以便由编译器来验证变量的值是否是一个常量表达式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> sz = size(); <span class="comment">// 只有当size()是一个constexpr函数时才是一条正确的语句</span></span><br></pre></td></tr></table></figure><h3 id="字面值类型"><a href="#字面值类型" class="headerlink" title="字面值类型"></a>字面值类型</h3><h1 id="2-5-处理类型"><a href="#2-5-处理类型" class="headerlink" title="2.5 处理类型"></a>2.5 处理类型</h1><h2 id="2-5-1-类型别名"><a href="#2-5-1-类型别名" class="headerlink" title="2.5.1 类型别名"></a>2.5.1 类型别名</h2><p>​    <strong>类型别名</strong>是一个名字，它是某种类型的同义词。使用类型别名能让复杂的类型名变得简单明了、易于理解和使用。</p><p>​    有两种方法可用于定义类型别名。分别是是使用<strong>关键字 typedef</strong>和<strong>别名声明using</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> wage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> SI = Sale_item;</span><br></pre></td></tr></table></figure><h2 id="2-5-2-auto-类型说明符"><a href="#2-5-2-auto-类型说明符" class="headerlink" title="2.5.2 auto 类型说明符"></a>2.5.2 auto 类型说明符</h2><p>​    <strong>auto</strong>类型说明符能让编译器替我们去分析表达式所属的类型。</p><h2 id="2-5-3-decltype-类型指示符"><a href="#2-5-3-decltype-类型指示符" class="headerlink" title="2.5.3 decltype 类型指示符"></a>2.5.3 decltype 类型指示符</h2><p>​    类型说明符<strong>decltype</strong>能从表达式的类型推断出要定义的变量的类型，但不使用该表达式的值初始化变量。其作用是选择并返回操作数的数据类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(f()) sum = x; <span class="comment">// 使用f()的返回类型初始化sum变量，而不使用f()的值</span></span><br></pre></td></tr></table></figure><h1 id="2-6-自定义数据结构"><a href="#2-6-自定义数据结构" class="headerlink" title="2.6 自定义数据结构"></a>2.6 自定义数据结构</h1><h2 id="2-6-1-定义-Sales-data-类型"><a href="#2-6-1-定义-Sales-data-类型" class="headerlink" title="2.6.1 定义 Sales_data 类型"></a>2.6.1 定义 Sales_data 类型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span> &#123;</span>          <span class="comment">// 关键字struct + 类名</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;      <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>; <span class="comment">// 类内初始值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-2-使用-Sales-data-类"><a href="#2-6-2-使用-Sales-data-类" class="headerlink" title="2.6.2 使用 Sales_data 类"></a>2.6.2 使用 Sales_data 类</h2><h3 id="添加-Sales-data-对象"><a href="#添加-Sales-data-对象" class="headerlink" title="添加 Sales_data 对象"></a>添加 Sales_data 对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sales_data data1;</span><br></pre></td></tr></table></figure><h3 id="Sales-data-对象读入数据"><a href="#Sales-data-对象读入数据" class="headerlink" title="Sales_data 对象读入数据"></a>Sales_data 对象读入数据</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; data1.bookNO &gt;&gt; data1.units_sold &gt;&gt; price;</span><br></pre></td></tr></table></figure><h2 id="2-6-3-编写自己的头文件"><a href="#2-6-3-编写自己的头文件" class="headerlink" title="2.6.3 编写自己的头文件"></a>2.6.3 编写自己的头文件</h2><p>​    为了确保哥哥文件中类的定义一致，类通常被定义在头文件中，而且类所在头文件的名字应与类的名字一样。头文件通常包含那些被定义一次的实体，如类、const 和 constexpr 变量。</p><h3 id="预处理器概述"><a href="#预处理器概述" class="headerlink" title="预处理器概述"></a>预处理器概述</h3><p>​    <strong>预处理器</strong>是在编译之前执行的一段程序，可以部分地改变我们所写的程序。能确保头文件多次包含仍能安全工作。之前用到的一项预处理器功能是#include。</p><p>​    C++用到的另一项与处理功能是<strong>头文件保护符</strong>，头文件保护符依赖于<strong>预处理变量</strong>。预处理变量有两种状态：已定义和未定义。<strong>#define</strong> 指令把一个名字设定为预处理变量，<strong>#ifdef</strong> 当且仅当变量已经定义是为真，<strong>#ifndef</strong> 仅当变量未定义时为真。检查结果为真时，执行后续操作直至遇到<strong>#endif</strong> 指令为止。</p><p>​    以下代码说明了这些功能如何有效防止重复包含：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SALES_DATA_H  <span class="comment">// 如果没有定义SALES_DATA_H预处理变量，则执行以下语句</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SALES_DATA_H  <span class="comment">// 定义SALES_DATA_H预处理变量</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> Sales_data</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>第一次包含该文件时，SALES_DATA_H 未定义，预处理器顺序执行代码。再次被包含时 SALES_DATA_H 已定义，<code>#ifndef SALES_DATA_H</code> 检查结果为假，编译器将跳过中间语句。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据类型决定了程序中数据和操作的意义。&lt;/p&gt;
&lt;h1 id=&quot;2-1-基本内置类型&quot;&gt;&lt;a href=&quot;#2-1-基本内置类型&quot; class=&quot;headerlink&quot; title=&quot;2.1 基本内置类型&quot;&gt;&lt;/a&gt;2.1 基本内置类型&lt;/h1&gt;&lt;h2 id=&quot;2-1-1-
      
    
    </summary>
    
      <category term="C++" scheme="http://a-kali.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://a-kali.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>《C++ Primer》 第1章 开始</title>
    <link href="http://a-kali.github.io/2019/08/19/%E3%80%8AC-Primer%E3%80%8B-%E7%AC%AC1%E7%AB%A0-%E5%BC%80%E5%A7%8B/"/>
    <id>http://a-kali.github.io/2019/08/19/《C-Primer》-第1章-开始/</id>
    <published>2019-08-19T13:36:16.000Z</published>
    <updated>2019-08-19T15:34:41.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1-编写一个简单的C-程序"><a href="#1-1-编写一个简单的C-程序" class="headerlink" title="1.1 编写一个简单的C++程序"></a>1.1 编写一个简单的C++程序</h1><h2 id="1-1-1-编译、运行程序"><a href="#1-1-1-编译、运行程序" class="headerlink" title="1.1.1 编译、运行程序"></a>1.1.1 编译、运行程序</h2><p>​    术语：<strong>集成开发环境</strong>（Integrated Developed Environment, IDE）</p><h3 id="源程序文件命名约定"><a href="#源程序文件命名约定" class="headerlink" title="源程序文件命名约定"></a>源程序文件命名约定</h3><p>​    大多数编译器要求源码存储在一个或多个文件中，这些程序文件通常被称为<strong>源文件</strong>。常见C++程序源文件后缀有：<strong>cc、cxx、cpp、cp、C</strong>。</p><h3 id="从命令行运行编译器"><a href="#从命令行运行编译器" class="headerlink" title="从命令行运行编译器"></a>从命令行运行编译器</h3><p>​    <code>$ CC prog1.cc</code></p><p>​    其中CC是编译器的名字。编译器生成一个可执行文件。Windows系统将这个可执行文件命名为<strong>prog1.exe</strong>。UNIX系统常命名为<strong>a.out</strong>。</p><h1 id="1-2-初识输入输出"><a href="#1-2-初识输入输出" class="headerlink" title="1.2 初识输入输出"></a>1.2 初识输入输出</h1><p>​    C++语言常用<strong>标准库</strong>来提供IO机制。同时本书中很多示例使用了<strong>iostream库</strong>。该库包含两个<strong>基础类型istream和ostream</strong>，分别表示输入流和输出流。“<strong>流</strong>”（stream）这个术语想表达的是，随着时间的推移，字符是序列生成或消耗的。</p><h3 id="标准输入输出对象"><a href="#标准输入输出对象" class="headerlink" title="标准输入输出对象"></a>标准输入输出对象</h3><p>标准库定义了4个<strong>IO对象：cin、cout、cerr、clog</strong>。</p><h3 id="一个IO库的程序"><a href="#一个IO库的程序" class="headerlink" title="一个IO库的程序"></a>一个IO库的程序</h3><p>​    程序的第一行</p><p>​    <code>#include &lt;iostream&gt;</code></p><p>告诉编译器我们想要使用iostream库。尖括号中的名字指出了一个<strong>头文件</strong>。每个使用标准库设施的程序都必须包含相关的头文件。对于非标准库的头文件，则用双引号包围。</p><h3 id="向流写入数据"><a href="#向流写入数据" class="headerlink" title="向流写入数据"></a>向流写入数据</h3><p>​    表达式</p><p>​    <code>std::cout &lt;&lt; &quot;Enter two numbers: &quot; &lt;&lt; std::endl;</code></p><p>使用了<strong>输出运算符</strong>（<strong>&lt;&lt;</strong>）在标准输出上打印信息。输出运算符接受两个运算对象：右侧的运算对象是要打印的值，左侧的运算对象必须是一个ostream对象。左侧的ostream对象是运算符的运算结果。</p><p>​    该语句使用了两次输出运算符，即第一次运算结果成为了第二个运算符的左侧对象。该语句等同于：</p><p>​    <code>(std::cout &lt;&lt; &quot;Enter two numbers: &quot;) &lt;&lt;# std::endl;</code></p><p>也可以用两条语句表达：</p><p>​    <code>std::cout &lt;&lt; &quot;Enter two numbers: &quot;</code></p><p>​    <code>std::cout &lt;&lt; std::endl;</code></p><h1 id="1-4-控制流"><a href="#1-4-控制流" class="headerlink" title="1.4 控制流"></a>1.4 控制流</h1><h2 id="1-4-3-读取数量不定的输入数据"><a href="#1-4-3-读取数量不定的输入数据" class="headerlink" title="1.4.3 读取数量不定的输入数据"></a>1.4.3 读取数量不定的输入数据</h2><p>​    在预先不知道要对多少个数求和时，就需要<strong>不断读取数据直至没有新的输入为止</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; value)</span><br><span class="line">    sum += value;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Sum is: "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>如果我们输入</p><p>​    <code>3 4 5 6</code></p><p>则程序会输出</p><p>​    <code>Sum is: 18</code></p><p>当我们使用一个istream对象作为条件时，其效果是检测流的状态。如果流时有效的，那么检测成功。当遇到文件结束符或一个无效输入（例如读入值与value定义的类型不相符），istream的状态会变为无效。</p><h3 id="从键盘输入文件结束符"><a href="#从键盘输入文件结束符" class="headerlink" title="从键盘输入文件结束符"></a>从键盘输入文件结束符</h3><p>Windows: Ctrl + Z, Enter</p><p>Unix&amp;MacOS: Ctrl + D</p><h1 id="1-5-类简介"><a href="#1-5-类简介" class="headerlink" title="1.5 类简介"></a>1.5 类简介</h1><p>​    在C++中，我们通过定义一个<strong>类</strong>（class）来定义自己的数据结构。一个类定义了一个类型，以及与其关联的一组操作。每个类实际上都定义了一个新的类型，其类型名就是其类名。</p><p>类/对象可以进行的操作：</p><ul><li>定义该类型的变量。</li><li>用输入、输出运算符读写该类型的对象。</li><li>在同类对象间进行赋值。</li><li>在两个同类对象间进行加法运算。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-1-编写一个简单的C-程序&quot;&gt;&lt;a href=&quot;#1-1-编写一个简单的C-程序&quot; class=&quot;headerlink&quot; title=&quot;1.1 编写一个简单的C++程序&quot;&gt;&lt;/a&gt;1.1 编写一个简单的C++程序&lt;/h1&gt;&lt;h2 id=&quot;1-1-1-编译、运行
      
    
    </summary>
    
      <category term="C++" scheme="http://a-kali.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="http://a-kali.github.io/tags/C/"/>
    
  </entry>
  
</feed>
